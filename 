[33mtag v1.4[m
Tagger: Taohan Wang <2520367w@student.gla.ac.uk>
Date:   Tue Jul 5 21:51:16 2022 +0800

my Version

[33mcommit 5b81023b1316ae86548cc680e324ec2374a5fa42[m[33m ([m[1;36mHEAD -> [m[1;32mmaster[m[33m, [m[1;33mtag: v1.4[m[33m)[m
Author: Taohan Wang <2520367w@student.gla.ac.uk>
Date:   Tue Jul 5 19:52:27 2022 +0800

    first commit

[1mdiff --git a/.idea/.gitignore b/.idea/.gitignore[m
[1mnew file mode 100644[m
[1mindex 0000000..5814cc7[m
[1m--- /dev/null[m
[1m+++ b/.idea/.gitignore[m
[36m@@ -0,0 +1,8 @@[m
[32m+[m[32m# Default ignored files[m
[32m+[m[32m/shelf/[m
[32m+[m[32m/workspace.xml[m
[32m+[m[32m# Datasource local storage ignored files[m
[32m+[m[32m/../../../:\javase\.idea/dataSources/[m
[32m+[m[32m/dataSources.local.xml[m
[32m+[m[32m# Editor-based HTTP Client requests[m
[32m+[m[32m/httpRequests/[m
[1mdiff --git a/.idea/compiler.xml b/.idea/compiler.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..ee2123a[m
[1m--- /dev/null[m
[1m+++ b/.idea/compiler.xml[m
[36m@@ -0,0 +1,16 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<project version="4">[m
[32m+[m[32m  <component name="CompilerConfiguration">[m
[32m+[m[32m    <annotationProcessing>[m
[32m+[m[32m      <profile name="Maven default annotation processors profile" enabled="true">[m
[32m+[m[32m        <sourceOutputDir name="target/generated-sources/annotations" />[m
[32m+[m[32m        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />[m
[32m+[m[32m        <outputRelativeToContentRoot value="true" />[m
[32m+[m[32m        <module name="javase" />[m
[32m+[m[32m      </profile>[m
[32m+[m[32m    </annotationProcessing>[m
[32m+[m[32m    <bytecodeTargetLevel>[m
[32m+[m[32m      <module name="javase" target="15" />[m
[32m+[m[32m    </bytecodeTargetLevel>[m
[32m+[m[32m  </component>[m
[32m+[m[32m</project>[m
\ No newline at end of file[m
[1mdiff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..712ab9d[m
[1m--- /dev/null[m
[1m+++ b/.idea/jarRepositories.xml[m
[36m@@ -0,0 +1,20 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<project version="4">[m
[32m+[m[32m  <component name="RemoteRepositoriesConfiguration">[m
[32m+[m[32m    <remote-repository>[m
[32m+[m[32m      <option name="id" value="central" />[m
[32m+[m[32m      <option name="name" value="Central Repository" />[m
[32m+[m[32m      <option name="url" value="https://repo.maven.apache.org/maven2" />[m
[32m+[m[32m    </remote-repository>[m
[32m+[m[32m    <remote-repository>[m
[32m+[m[32m      <option name="id" value="central" />[m
[32m+[m[32m      <option name="name" value="Maven Central repository" />[m
[32m+[m[32m      <option name="url" value="https://repo1.maven.org/maven2" />[m
[32m+[m[32m    </remote-repository>[m
[32m+[m[32m    <remote-repository>[m
[32m+[m[32m      <option name="id" value="jboss.community" />[m
[32m+[m[32m      <option name="name" value="JBoss Community repository" />[m
[32m+[m[32m      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />[m
[32m+[m[32m    </remote-repository>[m
[32m+[m[32m  </component>[m
[32m+[m[32m</project>[m
\ No newline at end of file[m
[1mdiff --git a/.idea/leetcode/editor.xml b/.idea/leetcode/editor.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..036a293[m
[1m--- /dev/null[m
[1m+++ b/.idea/leetcode/editor.xml[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<project version="4">[m
[32m+[m[32m  <component name="LeetcodeEditor">[m
[32m+[m[32m    <option name="projectConfig">[m
[32m+[m[32m      <map>[m
[32m+[m[32m        <entry key="$USER_HOME$/AppData/Local/Temp/leetcode/editor/cn/[4]寻找两个正序数组的中位数.java">[m
[32m+[m[32m          <value>[m
[32m+[m[32m            <LeetcodeEditor>[m
[32m+[m[32m              <option name="contentPath" value="$USER_HOME$/AppData/Local/Temp/leetcode/editor/cn/doc/content/[4]寻找两个正序数组的中位数.md" />[m
[32m+[m[32m              <option name="path" value="$USER_HOME$/AppData/Local/Temp/leetcode/editor/cn/[4]寻找两个正序数组的中位数.java" />[m
[32m+[m[32m              <option name="questionId" value="4" />[m
[32m+[m[32m            </LeetcodeEditor>[m
[32m+[m[32m          </value>[m
[32m+[m[32m        </entry>[m
[32m+[m[32m      </map>[m
[32m+[m[32m    </option>[m
[32m+[m[32m  </component>[m
[32m+[m[32m</project>[m
\ No newline at end of file[m
[1mdiff --git a/.idea/libraries/Maven__commons_io_commons_io_2_4.xml b/.idea/libraries/Maven__commons_io_commons_io_2_4.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..bc2aad0[m
[1m--- /dev/null[m
[1m+++ b/.idea/libraries/Maven__commons_io_commons_io_2_4.xml[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32m<component name="libraryTable">[m
[32m+[m[32m  <library name="Maven: commons-io:commons-io:2.4">[m
[32m+[m[32m    <CLASSES>[m
[32m+[m[32m      <root url="jar://$MAVEN_REPOSITORY$/commons-io/commons-io/2.4/commons-io-2.4.jar!/" />[m
[32m+[m[32m    </CLASSES>[m
[32m+[m[32m    <JAVADOC>[m
[32m+[m[32m      <root url="jar://$MAVEN_REPOSITORY$/commons-io/commons-io/2.4/commons-io-2.4-javadoc.jar!/" />[m
[32m+[m[32m    </JAVADOC>[m
[32m+[m[32m    <SOURCES>[m
[32m+[m[32m      <root url="jar://$MAVEN_REPOSITORY$/commons-io/commons-io/2.4/commons-io-2.4-sources.jar!/" />[m
[32m+[m[32m    </SOURCES>[m
[32m+[m[32m  </library>[m
[32m+[m[32m</component>[m
\ No newline at end of file[m
[1mdiff --git a/.idea/misc.xml b/.idea/misc.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..4219847[m
[1m--- /dev/null[m
[1m+++ b/.idea/misc.xml[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<project version="4">[m
[32m+[m[32m  <component name="MavenProjectsManager">[m
[32m+[m[32m    <option name="originalFiles">[m
[32m+[m[32m      <list>[m
[32m+[m[32m        <option value="$PROJECT_DIR$/pom.xml" />[m
[32m+[m[32m      </list>[m
[32m+[m[32m    </option>[m
[32m+[m[32m  </component>[m
[32m+[m[32m  <component name="ProjectRootManager" version="2" languageLevel="JDK_15" default="true" project-jdk-name="15" project-jdk-type="JavaSDK">[m
[32m+[m[32m    <output url="file://$PROJECT_DIR$/out" />[m
[32m+[m[32m  </component>[m
[32m+[m[32m</project>[m
\ No newline at end of file[m
[1mdiff --git a/.idea/modules.xml b/.idea/modules.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..c5c0920[m
[1m--- /dev/null[m
[1m+++ b/.idea/modules.xml[m
[36m@@ -0,0 +1,8 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<project version="4">[m
[32m+[m[32m  <component name="ProjectModuleManager">[m
[32m+[m[32m    <modules>[m
[32m+[m[32m      <module fileurl="file://$PROJECT_DIR$/javase.iml" filepath="$PROJECT_DIR$/javase.iml" />[m
[32m+[m[32m    </modules>[m
[32m+[m[32m  </component>[m
[32m+[m[32m</project>[m
\ No newline at end of file[m
[1mdiff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..e96534f[m
[1m--- /dev/null[m
[1m+++ b/.idea/uiDesigner.xml[m
[36m@@ -0,0 +1,124 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<project version="4">[m
[32m+[m[32m  <component name="Palette2">[m
[32m+[m[32m    <group name="Swing">[m
[32m+[m[32m      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">[m
[32m+[m[32m        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />[m
[32m+[m[32m        <initial-values>[m
[32m+[m[32m          <property name="text" value="Button" />[m
[32m+[m[32m        </initial-values>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />[m
[32m+[m[32m        <initial-values>[m
[32m+[m[32m          <property name="text" value="RadioButton" />[m
[32m+[m[32m        </initial-values>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />[m
[32m+[m[32m        <initial-values>[m
[32m+[m[32m          <property name="text" value="CheckBox" />[m
[32m+[m[32m        </initial-values>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />[m
[32m+[m[32m        <initial-values>[m
[32m+[m[32m          <property name="text" value="Label" />[m
[32m+[m[32m        </initial-values>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">[m
[32m+[m[32m          <preferred-size width="150" height="-1" />[m
[32m+[m[32m        </default-constraints>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">[m
[32m+[m[32m          <preferred-size width="150" height="-1" />[m
[32m+[m[32m        </default-constraints>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">[m
[32m+[m[32m          <preferred-size width="150" height="-1" />[m
[32m+[m[32m        </default-constraints>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">[m
[32m+[m[32m        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">[m
[32m+[m[32m          <preferred-size width="150" height="50" />[m
[32m+[m[32m        </default-constraints>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">[m
[32m+[m[32m        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">[m
[32m+[m[32m          <preferred-size width="150" height="50" />[m
[32m+[m[32m        </default-constraints>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">[m
[32m+[m[32m        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">[m
[32m+[m[32m          <preferred-size width="150" height="50" />[m
[32m+[m[32m        </default-constraints>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">[m
[32m+[m[32m          <preferred-size width="150" height="50" />[m
[32m+[m[32m        </default-constraints>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">[m
[32m+[m[32m          <preferred-size width="150" height="50" />[m
[32m+[m[32m        </default-constraints>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">[m
[32m+[m[32m          <preferred-size width="150" height="50" />[m
[32m+[m[32m        </default-constraints>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">[m
[32m+[m[32m          <preferred-size width="200" height="200" />[m
[32m+[m[32m        </default-constraints>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">[m
[32m+[m[32m          <preferred-size width="200" height="200" />[m
[32m+[m[32m        </default-constraints>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">[m
[32m+[m[32m          <preferred-size width="-1" height="20" />[m
[32m+[m[32m        </default-constraints>[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />[m
[32m+[m[32m      </item>[m
[32m+[m[32m      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">[m
[32m+[m[32m        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />[m
[32m+[m[32m      </item>[m
[32m+[m[32m    </group>[m
[32m+[m[32m  </component>[m
[32m+[m[32m</project>[m
\ No newline at end of file[m
[1mdiff --git a/1.jpg b/1.jpg[m
[1mnew file mode 100644[m
[1mindex 0000000..9d1e70c[m
Binary files /dev/null and b/1.jpg differ
[1mdiff --git a/2.jpg b/2.jpg[m
[1mnew file mode 100644[m
[1mindex 0000000..9d1e70c[m
Binary files /dev/null and b/2.jpg differ
[1mdiff --git a/3.jpg b/3.jpg[m
[1mnew file mode 100644[m
[1mindex 0000000..9d1e70c[m
Binary files /dev/null and b/3.jpg differ
[1mdiff --git a/javase.iml b/javase.iml[m
[1mnew file mode 100644[m
[1mindex 0000000..fc80659[m
[1m--- /dev/null[m
[1m+++ b/javase.iml[m
[36m@@ -0,0 +1,16 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">[m
[32m+[m[32m  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_15">[m
[32m+[m[32m    <output url="file://$MODULE_DIR$/target/classes" />[m
[32m+[m[32m    <output-test url="file://$MODULE_DIR$/target/test-classes" />[m
[32m+[m[32m    <content url="file://$MODULE_DIR$">[m
[32m+[m[32m      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />[m
[32m+[m[32m      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />[m
[32m+[m[32m      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />[m
[32m+[m[32m      <excludeFolder url="file://$MODULE_DIR$/target" />[m
[32m+[m[32m    </content>[m
[32m+[m[32m    <orderEntry type="inheritedJdk" />[m
[32m+[m[32m    <orderEntry type="sourceFolder" forTests="false" />[m
[32m+[m[32m    <orderEntry type="library" name="Maven: commons-io:commons-io:2.4" level="project" />[m
[32m+[m[32m  </component>[m
[32m+[m[32m</module>[m
\ No newline at end of file[m
[1mdiff --git a/pom.xml b/pom.xml[m
[1mnew file mode 100644[m
[1mindex 0000000..6e13e81[m
[1m--- /dev/null[m
[1m+++ b/pom.xml[m
[36m@@ -0,0 +1,26 @@[m
[32m+[m[32m<?xml version="1.0" encoding="UTF-8"?>[m
[32m+[m[32m<project xmlns="http://maven.apache.org/POM/4.0.0"[m
[32m+[m[32m         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"[m
[32m+[m[32m         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">[m
[32m+[m[32m    <modelVersion>4.0.0</modelVersion>[m
[32m+[m
[32m+[m[32m    <groupId>groupId</groupId>[m
[32m+[m[32m    <artifactId>javase</artifactId>[m
[32m+[m[32m    <version>1.0-SNAPSHOT</version>[m
[32m+[m
[32m+[m[32m    <properties>[m
[32m+[m[32m        <maven.compiler.source>15</maven.compiler.source>[m
[32m+[m[32m        <maven.compiler.target>15</maven.compiler.target>[m
[32m+[m[32m    </properties>[m
[32m+[m
[32m+[m[32m    <dependencies>[m
[32m+[m[32m        <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->[m
[32m+[m[32m        <dependency>[m
[32m+[m[32m            <groupId>commons-io</groupId>[m
[32m+[m[32m            <artifactId>commons-io</artifactId>[m
[32m+[m[32m            <version>2.4</version>[m
[32m+[m[32m        </dependency>[m
[32m+[m
[32m+[m[32m    </dependencies>[m
[32m+[m
[32m+[m[32m</project>[m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/Bubblesort.java b/src/main/java/Bubblesort.java[m
[1mnew file mode 100644[m
[1mindex 0000000..ba7958a[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Bubblesort.java[m
[36m@@ -0,0 +1,52 @@[m
[32m+[m[32mimport java.lang.reflect.Array;[m
[32m+[m[32mimport java.util.Arrays;[m
[32m+[m
[32m+[m[32mpublic class Bubblesort {[m
[32m+[m
[32m+[m[32m    public  void BubbleSort(int [] array){[m
[32m+[m[32m        for (int i = 0 ; i < array.length - 1 ; i ++){[m
[32m+[m[32m            for(int j = 0 ; j < array.length - 1 - i ; j ++){[m
[32m+[m[32m                if(array[j] >= array[j + 1])[m
[32m+[m[32m                    swap(array, j , j+1);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void bubbleSort(int[] array){[m
[32m+[m[32m        boolean swicth = true;[m
[32m+[m[32m        for(int i = 0; i < array.length - 1; i ++){[m
[32m+[m[32m            if(!swicth) break;[m
[32m+[m[32m            swicth = false;[m
[32m+[m[32m            for(int j = 0 ; j < array.length - 1 - i; j++){[m
[32m+[m[32m                if(array[j] > array[j+1]){[m
[32m+[m[32m                    swap(array, j, j+1);[m
[32m+[m[32m                    swicth = true;[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public  void swap(int [] array, int i , int j){[m
[32m+[m[32m        int temp = array[i];[m
[32m+[m[32m        array[i] = array[j];[m
[32m+[m[32m        array[j] = temp;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    //###########################################################################//[m
[32m+[m
[32m+[m
[32m+[m[32m    public void test(){[m
[32m+[m[32m        int []array = {1, 6, 8 ,4, 5, 1, 3};[m
[32m+[m[32m        bubbleSort(array);[m
[32m+[m[32m        String s = Arrays.toString(array);[m
[32m+[m[32m        System.out.println(s);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public  void main(String[] args) {[m
[32m+[m[32m        test();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chapter1/TrainTicket.java b/src/main/java/Dough/Chapter1/TrainTicket.java[m
[1mnew file mode 100644[m
[1mindex 0000000..949e5de[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chapter1/TrainTicket.java[m
[36m@@ -0,0 +1,47 @@[m
[32m+[m[32mpackage Dough.Chapter1;[m
[32m+[m
[32m+[m[32mpublic class TrainTicket {[m
[32m+[m
[32m+[m
[32m+[m[32m    public static class TicketTask implements Runnable{[m
[32m+[m[32m        private Integer Ticket = 30;[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public void run() {[m
[32m+[m[32m            while(Ticket> 0){[m
[32m+[m[32m                synchronized (Ticket){[m
[32m+[m[32m                    if(Ticket > 0){[m
[32m+[m[32m                        System.out.println(Thread.currentThread().getId() + "卖出了" + Ticket-- + "张票");[m
[32m+[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        Thread.sleep(1000);[m
[32m+[m[32m                    } catch (InterruptedException e) {[m
[32m+[m[32m                        e.printStackTrace();[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        TicketTask ticketTask = new TicketTask();[m
[32m+[m[32m        Thread t1 = new Thread(ticketTask);[m
[32m+[m[32m        Thread t2 = new Thread(ticketTask);[m
[32m+[m[32m        Thread t3 = new Thread(ticketTask);[m
[32m+[m
[32m+[m[32m        t1.setPriority(Thread.MAX_PRIORITY);[m
[32m+[m[32m        t2.setPriority(Thread.NORM_PRIORITY);[m
[32m+[m[32m        t3.setPriority(Thread.MIN_PRIORITY);[m
[32m+[m
[32m+[m[32m        t1.start();[m
[32m+[m[32m        t2.start();[m
[32m+[m[32m        t3.start();[m
[32m+[m
[32m+[m[32m        System.out.println("t1:" + t1.getId());[m
[32m+[m[32m        System.out.println("t2:" + t2.getId());[m
[32m+[m[32m        System.out.println("t3:" + t3.getId());[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chapter1/myTest1.java b/src/main/java/Dough/Chapter1/myTest1.java[m
[1mnew file mode 100644[m
[1mindex 0000000..4f342a3[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chapter1/myTest1.java[m
[36m@@ -0,0 +1,54 @@[m
[32m+[m[32mpackage Dough.Chapter1;[m
[32m+[m
[32m+[m[32mpublic class myTest1 {[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Object object = new Object();[m
[32m+[m[32m        Thread th1 = new Thread(new Runnable() {[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public void run() {[m
[32m+[m[32m                synchronized (object){[m
[32m+[m[32m                    while(true){[m
[32m+[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        Thread th2 = new Thread(new Runnable() {[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public void run() {[m
[32m+[m[32m                synchronized(object){[m
[32m+[m[32m                    while(true){[m
[32m+[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        System.out.println("开始时th1的state" + th1.getState());[m
[32m+[m[32m        System.out.println("开始时th2的state" + th2.getState());[m
[32m+[m[32m        System.out.println("main" + Thread.currentThread().getState());[m
[32m+[m
[32m+[m[32m        th1.start();[m
[32m+[m
[32m+[m
[32m+[m[32m        try {[m
[32m+[m[32m            Thread.sleep(1000);[m
[32m+[m[32m            System.out.println("main" + Thread.currentThread().getState());[m
[32m+[m
[32m+[m[32m        } catch (InterruptedException e) {[m
[32m+[m[32m            e.printStackTrace();[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        th2.start();[m
[32m+[m
[32m+[m[32m        System.out.println("目前th1的state" + th1.getState());[m
[32m+[m[32m        System.out.println("目前th2的state" + th2.getState());[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chapter1/myTest2.java b/src/main/java/Dough/Chapter1/myTest2.java[m
[1mnew file mode 100644[m
[1mindex 0000000..a36f188[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chapter1/myTest2.java[m
[36m@@ -0,0 +1,57 @@[m
[32m+[m[32mpackage Dough.Chapter1;[m
[32m+[m
[32m+[m[32mpublic class myTest2 {[m
[32m+[m[32m    static Thread t1 = null;[m
[32m+[m[32m    static Thread t2 = null;[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m
[32m+[m[32m        t1 = new Thread(new Runnable() {[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public void run() {[m
[32m+[m[32m                for (int i = 0; i < 10; i++) {[m
[32m+[m[32m                    System.out.println(Thread.currentThread().getName() + "i = " + i);[m
[32m+[m[32m                    delay();[m
[32m+[m[32m                }[m
[32m+[m[32m                System.out.println("t2线程状态" + t2.getState());[m
[32m+[m[32m                System.out.println("t1运行结束");[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        t2 = new Thread(new Runnable() {[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public void run() {[m
[32m+[m[32m                for (int i = 0; i < 10; i++) {[m
[32m+[m[32m                    System.out.println(Thread.currentThread().getName() + " k = " + i);[m
[32m+[m[32m                    delay();[m
[32m+[m
[32m+[m[32m                    if(i == 3){[m
[32m+[m[32m                        try {[m
[32m+[m[32m                            System.out.println("t1加入了她");[m
[32m+[m[32m                            t1.join();[m
[32m+[m[32m                        } catch (InterruptedException e) {[m
[32m+[m[32m                            e.printStackTrace();[m
[32m+[m[32m                        }[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        t1.start();[m
[32m+[m[32m        t2.start();[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void delay(){[m
[32m+[m[32m        double d = 0;[m
[32m+[m[32m        for (int i = 0; i < 10000; i++) {[m
[32m+[m[32m            d += (Math.PI + Math.E) / i;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chapter3/BuildMatrix.java b/src/main/java/Dough/Chapter3/BuildMatrix.java[m
[1mnew file mode 100644[m
[1mindex 0000000..c92ade6[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chapter3/BuildMatrix.java[m
[36m@@ -0,0 +1,47 @@[m
[32m+[m[32mpackage Dough.Chapter3;[m
[32m+[m
[32m+[m[32mimport java.util.concurrent.CyclicBarrier;[m
[32m+[m
[32m+[m[32mpublic class BuildMatrix {[m
[32m+[m
[32m+[m[32m    class MatrixSolver{[m
[32m+[m[32m        public float[][]matrix;[m
[32m+[m[32m        public int num;[m
[32m+[m
[32m+[m[32m        public MatrixSolver(float[][]matrix) {[m
[32m+[m[32m            this.matrix = matrix;[m
[32m+[m[32m            this.num = matrix.length;[m
[32m+[m
[32m+[m[32m            CyclicBarrier barrier = new CyclicBarrier(num, new Runnable() {[m
[32m+[m[32m                @Override[m
[32m+[m[32m                public void run() {[m
[32m+[m[32m                    System.out.println("所有任务都已经完成了， 可以使用数组了");[m
[32m+[m[32m                }[m
[32m+[m[32m            });[m
[32m+[m
[32m+[m[32m            for (int i = 0; i < num; i++) {[m
[32m+[m[32m                Thread t = new Thread();[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    class Worker implements Runnable{[m
[32m+[m[32m        public float[][]matrix;[m
[32m+[m[32m        int row;[m
[32m+[m[32m        public Worker(float[][]matrix, int row){[m
[32m+[m[32m            this.matrix = matrix;[m
[32m+[m[32m            this.row = row;[m
[32m+[m[32m        }[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public void run() {[m
[32m+[m[32m            int sum = 0;[m
[32m+[m[32m            for(int i = 0; i < matrix[0].length; i++){[m
[32m+[m[32m                sum += matrix[row][i];[m
[32m+[m[32m            }[m
[32m+[m[32m            System.out.println("第" + row + "行的和为" + sum);[m
[32m+[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chapter3/CarBuild.java b/src/main/java/Dough/Chapter3/CarBuild.java[m
[1mnew file mode 100644[m
[1mindex 0000000..b8c1904[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chapter3/CarBuild.java[m
[36m@@ -0,0 +1,55 @@[m
[32m+[m[32mpackage Dough.Chapter3;[m
[32m+[m
[32m+[m[32mimport java.util.concurrent.CountDownLatch;[m
[32m+[m
[32m+[m[32mpublic class CarBuild {[m
[32m+[m
[32m+[m[32m    static class workingTask implements Runnable{[m
[32m+[m[32m        private CountDownLatch countDownLatch;[m
[32m+[m
[32m+[m[32m        public workingTask(CountDownLatch countDownLatch){[m
[32m+[m[32m            this.countDownLatch = countDownLatch;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public void run() {[m
[32m+[m[32m            int r = (int)(Math.random() * 10);[m
[32m+[m[32m            try {[m
[32m+[m[32m                Thread.sleep(r * 100);[m
[32m+[m[32m            } catch (InterruptedException e) {[m
[32m+[m[32m                e.printStackTrace();[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            System.out.println(Thread.currentThread().getId() + "任务完成");[m
[32m+[m[32m            countDownLatch.countDown();[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static class waitingTask implements Runnable{[m
[32m+[m[32m        private CountDownLatch countDownLatch;[m
[32m+[m[32m        public waitingTask(CountDownLatch countDownLatch){[m
[32m+[m[32m            this.countDownLatch = countDownLatch;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public void run() {[m
[32m+[m[32m            System.out.println("阻塞等待其他任务完成");[m
[32m+[m[32m            try {[m
[32m+[m[32m                countDownLatch.await();[m
[32m+[m[32m            } catch (InterruptedException e) {[m
[32m+[m[32m                e.printStackTrace();[m
[32m+[m[32m            }[m
[32m+[m[32m            System.out.println("任务完成了");[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        CountDownLatch countDownLatch = new CountDownLatch(10);[m
[32m+[m[32m        for (int i = 0; i < 10; i++) {[m
[32m+[m[32m            new Thread(new workingTask(countDownLatch)).start();[m
[32m+[m[32m        }[m
[32m+[m[32m        new Thread(new waitingTask(countDownLatch)).start();[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chapter3/ChefAndWaitor.java b/src/main/java/Dough/Chapter3/ChefAndWaitor.java[m
[1mnew file mode 100644[m
[1mindex 0000000..bf57c26[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chapter3/ChefAndWaitor.java[m
[36m@@ -0,0 +1,158 @@[m
[32m+[m[32mpackage Dough.Chapter3;[m
[32m+[m
[32m+[m[32mpublic class ChefAndWaitor {[m
[32m+[m
[32m+[m[32m    static public class Order{[m
[32m+[m[32m        public String Info;[m
[32m+[m[32m        public String Dno;[m
[32m+[m
[32m+[m[32m        public void setInfo(String info){[m
[32m+[m[32m            Info = info;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void setDno(String Dno){[m
[32m+[m[32m            this.Dno = Dno;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public String getInfo(){[m
[32m+[m[32m            return Info;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public String getDno(){[m
[32m+[m[32m            return Dno;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static class Resturant implements Runnable{[m
[32m+[m[32m        private Waitor waitor;[m
[32m+[m
[32m+[m[32m        public void setWaitor(Waitor waitor){[m
[32m+[m[32m            this.waitor = waitor;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public void run() {[m
[32m+[m[32m            while(true){[m
[32m+[m[32m                int num = (int) (Math.random() * 5000);[m
[32m+[m
[32m+[m[32m                try {[m
[32m+[m[32m                    Thread.sleep(num);[m
[32m+[m
[32m+[m[32m                    Order order = new Order();[m
[32m+[m[32m                    order.setDno("d" + System.currentTimeMillis());[m
[32m+[m[32m                    order.setInfo("公报给定");[m
[32m+[m
[32m+[m[32m                    synchronized (waitor){[m
[32m+[m[32m                        waitor.setOrder(order);[m
[32m+[m[32m                        waitor.setMsgId(1);[m
[32m+[m[32m                        waitor.notify();[m
[32m+[m[32m                    }[m
[32m+[m[32m                } catch (InterruptedException e) {[m
[32m+[m[32m                    e.printStackTrace();[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static class Waitor implements Runnable{[m
[32m+[m[32m        private Order order;[m
[32m+[m[32m        private int MsgId;[m
[32m+[m[32m        private Chef chef;[m
[32m+[m
[32m+[m[32m        public void setOrder(Order order){[m
[32m+[m[32m            this.order = order;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void setChef(Chef chef){[m
[32m+[m[32m            this.chef = chef;[m
[32m+[m[32m        }[m
[32m+[m[32m        public void setMsgId(int MsgId){[m
[32m+[m[32m            this.MsgId = MsgId;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public void run() {[m
[32m+[m[32m            while (true) {[m
[32m+[m[32m                synchronized (this) {[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        wait();[m
[32m+[m[32m                    } catch (InterruptedException e) {[m
[32m+[m[32m                        e.printStackTrace();[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m                if (MsgId == 1) {[m
[32m+[m[32m                    System.out.println("服务员收到了新的订单" + order.getDno() + " : " + order.getInfo());[m
[32m+[m
[32m+[m[32m                    synchronized (chef){[m
[32m+[m[32m                        chef.notify();[m
[32m+[m[32m                        chef.setOrder(order);[m
[32m+[m
[32m+[m[32m                      }[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                if(MsgId == 2){[m
[32m+[m[32m                    System.out.println("订单" + order.getDno() + "已完成");[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static class Chef implements Runnable{[m
[32m+[m[32m        private Order order;[m
[32m+[m[32m        private Waitor waitor;[m
[32m+[m
[32m+[m
[32m+[m[32m        public void setOrder(Order order){[m
[32m+[m[32m            this.order = order;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void setWaitor(Waitor waitor){[m
[32m+[m[32m            this.waitor = waitor;[m
[32m+[m[32m        }[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public void run() {[m
[32m+[m[32m            while (true){[m
[32m+[m[32m                synchronized (this){[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        wait();[m
[32m+[m[32m                    } catch (InterruptedException e) {[m
[32m+[m[32m                        e.printStackTrace();[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                int Rand = (int) (Math.random() * 5000);[m
[32m+[m[32m                try {[m
[32m+[m[32m                    Thread.sleep(Rand);[m
[32m+[m[32m                } catch (InterruptedException e) {[m
[32m+[m[32m                    e.printStackTrace();[m
[32m+[m[32m                }[m
[32m+[m[32m                synchronized (waitor){[m
[32m+[m[32m                    waitor.setMsgId(2);[m
[32m+[m[32m                    waitor.notify();[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Resturant resturant = new Resturant();[m
[32m+[m[32m        Waitor waitor = new Waitor();[m
[32m+[m[32m        Chef chef = new Chef();[m
[32m+[m
[32m+[m[32m        waitor.setChef(chef);[m
[32m+[m[32m        chef.setWaitor(waitor);[m
[32m+[m[32m        resturant.setWaitor(waitor);[m
[32m+[m
[32m+[m[32m        new Thread(resturant).start();[m
[32m+[m[32m        new Thread(waitor).start();[m
[32m+[m[32m        new Thread(chef).start();[m
[32m+[m[32m        new Thread(chef).start();[m
[32m+[m[32m        new Thread(chef).start();[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chapter3/IsInterrupated.java b/src/main/java/Dough/Chapter3/IsInterrupated.java[m
[1mnew file mode 100644[m
[1mindex 0000000..2483dd6[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chapter3/IsInterrupated.java[m
[36m@@ -0,0 +1,34 @@[m
[32m+[m[32mpackage Dough.Chapter3;[m
[32m+[m
[32m+[m[32mpublic class IsInterrupated {[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) throws InterruptedException {[m
[32m+[m[32m        Object obj = new Object();[m
[32m+[m[32m        Thread t = new Thread(new Runnable() {[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public void run() {[m
[32m+[m[32m                for (int i = 0; i < 10; i++) {[m
[32m+[m[32m                    if (Thread.currentThread().isInterrupted()){[m
[32m+[m[32m                        System.out.println("收到中止通知，线程开始中止了");[m
[32m+[m[32m                    }[m
[32m+[m[32m                    else{[m
[32m+[m[32m                        System.out.println(Thread.currentThread().getId() + " i = " + i);[m
[32m+[m[32m                        try {[m
[32m+[m[32m                            Thread.sleep(100);[m
[32m+[m[32m                        } catch (InterruptedException e) {[m
[32m+[m[32m                            e.printStackTrace();[m
[32m+[m[32m                        }[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m[32m                }[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        t.start();[m
[32m+[m[32m        Thread.sleep(1000);[m
[32m+[m[32m        t.interrupt();[m
[32m+[m[32m        System.out.println(t.getId() + "中断状态" + t.getState());[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chapter3/Print.java b/src/main/java/Dough/Chapter3/Print.java[m
[1mnew file mode 100644[m
[1mindex 0000000..4eb99a1[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chapter3/Print.java[m
[36m@@ -0,0 +1,80 @@[m
[32m+[m[32mpackage Dough.Chapter3;[m
[32m+[m
[32m+[m[32mpublic class Print {[m
[32m+[m
[32m+[m[32m    public static class State{[m
[32m+[m[32m        boolean state;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static class printA implements Runnable{[m
[32m+[m[32m        private State state;[m
[32m+[m
[32m+[m[32m        public printA(State state){[m
[32m+[m[32m            this.state = state;[m
[32m+[m[32m        }[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public void run() {[m
[32m+[m[32m            while(true){[m
[32m+[m[32m                synchronized(state){[m
[32m+[m[32m                    if(state.state){[m
[32m+[m[32m                        try {[m
[32m+[m[32m                            state.wait();[m
[32m+[m[32m                        } catch (InterruptedException e) {[m
[32m+[m[32m                            e.printStackTrace();[m
[32m+[m[32m                        }[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m[32m                System.out.println("AA");[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        Thread.sleep(1000);[m
[32m+[m[32m                    } catch (InterruptedException e) {[m
[32m+[m[32m                        e.printStackTrace();[m
[32m+[m[32m                    }[m
[32m+[m[32m                    state.state = true;[m
[32m+[m
[32m+[m[32m                    state.notify();[m
[32m+[m
[32m+[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static class printB implements Runnable{[m
[32m+[m[32m        private State state;[m
[32m+[m
[32m+[m[32m        public printB(State state){[m
[32m+[m[32m            this.state = state;[m
[32m+[m[32m        }[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public void run() {[m
[32m+[m[32m            while (true){[m
[32m+[m[32m                synchronized (state){[m
[32m+[m[32m                    if(!state.state){[m
[32m+[m[32m                        try {[m
[32m+[m[32m                            state.wait();[m
[32m+[m[32m                        } catch (InterruptedException e) {[m
[32m+[m[32m                            e.printStackTrace();[m
[32m+[m[32m                        }[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m[32m                System.out.println("BB");[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        Thread.sleep(1000);[m
[32m+[m[32m                    } catch (InterruptedException e) {[m
[32m+[m[32m                        e.printStackTrace();[m
[32m+[m[32m                    }[m
[32m+[m[32m                state.state = false;[m
[32m+[m[32m                state.notify();[m
[32m+[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        State state = new State();[m
[32m+[m[32m        new Thread(new printA(state)).start();[m
[32m+[m[32m        new Thread(new printB(state)).start();[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chapter4/HttpRequest.java b/src/main/java/Dough/Chapter4/HttpRequest.java[m
[1mnew file mode 100644[m
[1mindex 0000000..22a0c5a[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chapter4/HttpRequest.java[m
[36m@@ -0,0 +1,36 @@[m
[32m+[m[32mpackage Dough.Chapter4;[m
[32m+[m
[32m+[m[32mimport java.io.BufferedOutputStream;[m
[32m+[m[32mimport java.io.DataOutputStream;[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m[32mimport java.net.Socket;[m
[32m+[m[32mimport java.util.concurrent.ExecutorService;[m
[32m+[m[32mimport java.util.concurrent.Executors;[m
[32m+[m
[32m+[m[32mpublic class HttpRequest {[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        ExecutorService pool = Executors.newScheduledThreadPool(3);[m
[32m+[m
[32m+[m[32m        for (int i = 0; i < 50; i++) {[m
[32m+[m[32m            pool.execute(new Runnable() {[m
[32m+[m[32m                @Override[m
[32m+[m[32m                public void run() {[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        final Socket socket = new Socket("localhost", 9000);[m
[32m+[m[32m                        DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));[m
[32m+[m[32m                        String msg = Thread.currentThread().getId() + "hello";[m
[32m+[m[32m                        dos.write(msg.getBytes("iso-8859-1"));[m
[32m+[m[32m                        System.out.println("发送" + msg);[m
[32m+[m[32m                        dos.flush();[m
[32m+[m[32m                        socket.shutdownOutput();[m
[32m+[m[32m                        dos.close();[m
[32m+[m[32m                        socket.close();[m
[32m+[m[32m                    } catch (IOException e) {[m
[32m+[m[32m                        e.printStackTrace();[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            });[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chapter4/ThreadPool.java b/src/main/java/Dough/Chapter4/ThreadPool.java[m
[1mnew file mode 100644[m
[1mindex 0000000..f7c7f28[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chapter4/ThreadPool.java[m
[36m@@ -0,0 +1,38 @@[m
[32m+[m[32mpackage Dough.Chapter4;[m
[32m+[m
[32m+[m[32mimport java.util.concurrent.BlockingQueue;[m
[32m+[m[32mimport java.util.concurrent.LinkedBlockingQueue;[m
[32m+[m[32mimport java.util.concurrent.ThreadPoolExecutor;[m
[32m+[m[32mimport java.util.concurrent.TimeUnit;[m
[32m+[m
[32m+[m[32mpublic class ThreadPool {[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        BlockingQueue<Runnable>bq = new LinkedBlockingQueue<>(5);[m
[32m+[m[32m        ThreadPoolExecutor pool = new ThreadPoolExecutor(3,8,2000, TimeUnit.MILLISECONDS,bq);[m
[32m+[m
[32m+[m[32m        for (int i = 0; i < 10; i++) {[m
[32m+[m[32m            pool.execute(new Runnable() {[m
[32m+[m[32m                @Override[m
[32m+[m[32m                public void run() {[m
[32m+[m[32m                    System.out.println(Thread.currentThread().getId() + " is Running");[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        Thread.sleep(800);[m
[32m+[m[32m                    } catch (InterruptedException e) {[m
[32m+[m[32m                        e.printStackTrace();[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            });[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        System.out.println("线城市线程数为" + pool.getPoolSize());[m
[32m+[m[32m        try {[m
[32m+[m[32m            Thread.sleep(500);[m
[32m+[m[32m        } catch (InterruptedException e) {[m
[32m+[m[32m            e.printStackTrace();[m
[32m+[m[32m        }[m
[32m+[m[32m        System.out.println("线城市线程数为" + pool.getPoolSize());[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chapter4/WebServer.java b/src/main/java/Dough/Chapter4/WebServer.java[m
[1mnew file mode 100644[m
[1mindex 0000000..b0f061e[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chapter4/WebServer.java[m
[36m@@ -0,0 +1,63 @@[m
[32m+[m[32mpackage Dough.Chapter4;[m
[32m+[m
[32m+[m[32mimport java.io.BufferedInputStream;[m
[32m+[m[32mimport java.io.ByteArrayOutputStream;[m
[32m+[m[32mimport java.io.DataInputStream;[m
[32m+[m[32mimport java.io.IOException;[m
[32m+[m[32mimport java.net.ServerSocket;[m
[32m+[m[32mimport java.net.Socket;[m
[32m+[m[32mimport java.util.concurrent.ExecutorService;[m
[32m+[m[32mimport java.util.concurrent.Executors;[m
[32m+[m
[32m+[m[32mpublic class WebServer {[m
[32m+[m
[32m+[m[32m    public void start(){[m
[32m+[m[32m        try {[m
[32m+[m[32m            ServerSocket server = new ServerSocket(9000);[m
[32m+[m[32m            ExecutorService pool = Executors.newCachedThreadPool();[m
[32m+[m[32m            System.out.println("Web服务器启动，端口号为9000");[m
[32m+[m
[32m+[m[32m            while(!pool.isShutdown()){[m
[32m+[m[32m                final Socket socket = server.accept();[m
[32m+[m[32m                pool.execute(handleRequest(socket));[m
[32m+[m[32m            }[m
[32m+[m[32m        } catch (IOException e) {[m
[32m+[m[32m            e.printStackTrace();[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public Runnable handleRequest(Socket socket){[m
[32m+[m[32m        Runnable runnable = new Runnable() {[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public void run() {[m
[32m+[m[32m                try {[m
[32m+[m[32m                    DataInputStream dis = new DataInputStream(new BufferedInputStream(socket.getInputStream()));[m
[32m+[m[32m                    byte[] buffer = new byte[1024];[m
[32m+[m[32m                    ByteArrayOutputStream bos = new ByteArrayOutputStream();[m
[32m+[m[32m                    int len = 0;[m
[32m+[m
[32m+[m[32m                    while((len = dis.read(buffer)) != -1){[m
[32m+[m[32m                        bos.write(buffer,0, len);[m
[32m+[m[32m                    }[m
[32m+[m[32m                    String resMsg = new String(bos.toByteArray(),"iso-8859-1");[m
[32m+[m[32m                    System.out.println(Thread.currentThread().getId() + "收到" + resMsg);[m
[32m+[m[32m                    bos.close();[m
[32m+[m[32m                    dis.close();[m
[32m+[m[32m                    socket.close();[m
[32m+[m[32m                } catch (IOException e) {[m
[32m+[m[32m                    e.printStackTrace();[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        };[m
[32m+[m[32m        return runnable;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        new Thread(new Runnable() {[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public void run() {[m
[32m+[m[32m                new WebServer().start();[m
[32m+[m[32m            }[m
[32m+[m[32m        }).start();[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chatpter2/FamilyMoney.java b/src/main/java/Dough/Chatpter2/FamilyMoney.java[m
[1mnew file mode 100644[m
[1mindex 0000000..39eadb2[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chatpter2/FamilyMoney.java[m
[36m@@ -0,0 +1,191 @@[m
[32m+[m[32mpackage Dough.Chatpter2;[m
[32m+[m
[32m+[m[32mpublic class FamilyMoney {[m
[32m+[m
[32m+[m[32m    static class Family {[m
[32m+[m[32m        public double account;[m
[32m+[m[32m        public Father father;[m
[32m+[m[32m        public Mother mother;[m
[32m+[m[32m        public Son son;[m
[32m+[m[32m        public String name;[m
[32m+[m
[32m+[m[32m        public Family(String name) {[m
[32m+[m[32m            this.name = name;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void setAccount(double money) {[m
[32m+[m[32m            this.account = money;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public double getAccount() {[m
[32m+[m[32m            return this.account;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void setFather(Father father){[m
[32m+[m[32m            this.father = father;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void setMother(Mother mother){[m
[32m+[m[32m            this.mother = mother;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void setSon(Son son){[m
[32m+[m[32m            this.son = son;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static class Father {[m
[32m+[m[32m        Family family;[m
[32m+[m[32m        String name;[m
[32m+[m
[32m+[m[32m        public Father(String name, Family family) {[m
[32m+[m[32m            this.name = name;[m
[32m+[m[32m            this.family = family;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void earning(int money) {[m
[32m+[m[32m            synchronized (this.family) {[m
[32m+[m[32m                double leftMoney = this.family.getAccount();[m
[32m+[m[32m                System.out.println("父亲" + this.name + "挣钱之前还有" + leftMoney);[m
[32m+[m
[32m+[m[32m                leftMoney += money;[m
[32m+[m[32m                System.out.println("父亲" + this.name + "挣钱之后还有" + leftMoney);[m
[32m+[m
[32m+[m[32m                this.family.setAccount(leftMoney);[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static class Mother {[m
[32m+[m[32m        Family family;[m
[32m+[m[32m        String name;[m
[32m+[m
[32m+[m[32m        public Mother(String name, Family family) {[m
[32m+[m[32m            this.name = name;[m
[32m+[m[32m            this.family = family;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void shopping(int money) {[m
[32m+[m[32m            synchronized (this.family) {[m
[32m+[m[32m                double leftMoney = this.family.getAccount();[m
[32m+[m[32m                if (leftMoney - money >= 0) {[m
[32m+[m[32m                    System.out.println("女人" + this.name + "消费前还有" + leftMoney);[m
[32m+[m[32m                    leftMoney -= money;[m
[32m+[m[32m                    System.out.println("女人消费后还有" + leftMoney);[m
[32m+[m[32m                    this.family.setAccount(leftMoney);[m
[32m+[m[32m                } else {[m
[32m+[m[32m                    System.out.println("钱不够了别花了坏女人");[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static class Son {[m
[32m+[m[32m        public Family family;[m
[32m+[m[32m        private String name;[m
[32m+[m
[32m+[m[32m        public Son(String name, Family family) {[m
[32m+[m[32m            this.family = family;[m
[32m+[m[32m            this.name = name;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void gamePlaying(int money) {[m
[32m+[m[32m            synchronized (this.family) {[m
[32m+[m[32m                double leftMoney = family.getAccount();[m
[32m+[m[32m                if (leftMoney - money < 0) {[m
[32m+[m[32m                    System.out.println("家里没钱了别玩了熊孩子");[m
[32m+[m[32m                } else {[m
[32m+[m[32m                    System.out.println("玩游戏前还有" + leftMoney);[m
[32m+[m[32m                    leftMoney -= money;[m
[32m+[m[32m                    System.out.println("玩游戏后还有" + leftMoney);[m
[32m+[m[32m                    family.setAccount(leftMoney);[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static class FatherTask implements Runnable {[m
[32m+[m[32m        private Father father;[m
[32m+[m
[32m+[m[32m        public FatherTask(Father father) {[m
[32m+[m[32m            this.father = father;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public void run() {[m
[32m+[m[32m            while (true) {[m
[32m+[m[32m                father.earning(10);[m
[32m+[m
[32m+[m[32m                try {[m
[32m+[m[32m                    Thread.sleep(1000);[m
[32m+[m[32m                } catch (InterruptedException e) {[m
[32m+[m[32m                    e.printStackTrace();[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m        static class MotherTask implements Runnable {[m
[32m+[m[32m            private Mother mother;[m
[32m+[m
[32m+[m[32m            public MotherTask(Mother mother) {[m
[32m+[m[32m                this.mother = mother;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public void run() {[m
[32m+[m[32m                while (true) {[m
[32m+[m[32m                    mother.shopping(7);[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        Thread.sleep(1000);[m
[32m+[m[32m                    } catch (InterruptedException e) {[m
[32m+[m[32m                        e.printStackTrace();[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        static class SonTask implements Runnable {[m
[32m+[m[32m            private Son son;[m
[32m+[m
[32m+[m[32m            public SonTask(Son son) {[m
[32m+[m[32m                this.son = son;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public void run() {[m
[32m+[m[32m                while (true) {[m
[32m+[m[32m                    son.gamePlaying(5);[m
[32m+[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        Thread.sleep(1000);[m
[32m+[m[32m                    } catch (InterruptedException e) {[m
[32m+[m[32m                        e.printStackTrace();[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Family family = new Family("一家三口");[m
[32m+[m[32m        Father father = new Father("王", family);[m
[32m+[m[32m        Mother mother = new Mother("涵", family);[m
[32m+[m[32m        Son son = new Son("小", family);[m
[32m+[m[32m        family.setFather(father);[m
[32m+[m[32m        family.setSon(son);[m
[32m+[m[32m        family.setMother(mother);[m
[32m+[m
[32m+[m[32m        new Thread(new FatherTask(father)).start();[m
[32m+[m[32m        new Thread(new MotherTask(mother)).start();[m
[32m+[m[32m        new Thread(new SonTask(son)).start();[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/Dough/Chatpter2/SaleingTickets.java b/src/main/java/Dough/Chatpter2/SaleingTickets.java[m
[1mnew file mode 100644[m
[1mindex 0000000..5553ff1[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chatpter2/SaleingTickets.java[m
[36m@@ -0,0 +1,65 @@[m
[32m+[m[32mpackage Dough.Chatpter2;[m
[32m+[m
[32m+[m[32mimport java.util.LinkedList;[m
[32m+[m
[32m+[m[32mpublic class SaleingTickets {[m
[32m+[m[32m    public static class Ticket{[m
[32m+[m[32m        int cno;[m
[32m+[m[32m        public Ticket(int cno){[m
[32m+[m[32m            this.cno = cno;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public int getNumber(){[m
[32m+[m[32m            return cno;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static class TicketTask implements Runnable{[m
[32m+[m[32m        private LinkedList<Ticket>tickets;[m
[32m+[m[32m        public TicketTask(LinkedList<Ticket>tickets){[m
[32m+[m[32m            this.tickets = tickets;[m
[32m+[m[32m        }[m
[32m+[m[32m        @Override[m
[32m+[m[32m        public void run() {[m
[32m+[m[32m            while(!tickets.isEmpty()){[m
[32m+[m[32m                synchronized(this){[m
[32m+[m[32m                    Ticket ticket = tickets.pollLast();[m
[32m+[m[32m                    System.out.println(Thread.currentThread().getId() + "卖出去了第 " + ticket.getNumber());[m
[32m+[m[32m                }[m
[32m+[m[32m                try {[m
[32m+[m[32m                    Thread.sleep(1000);[m
[32m+[m[32m                } catch (InterruptedException e) {[m
[32m+[m[32m                    e.printStackTrace();[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static class Curtain extends Thread{[m
[32m+[m[32m        private int curtainNum;[m
[32m+[m[32m        public int getCurtainNum(){[m
[32m+[m[32m            return curtainNum;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public Curtain(int curtainNum, Runnable runnable){[m
[32m+[m[32m            super(runnable);[m
[32m+[m[32m            this.curtainNum = curtainNum;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        LinkedList<Ticket>list = new LinkedList<>();[m
[32m+[m[32m        for (int i = 0; i < 20; i++) {[m
[32m+[m[32m            list.add(new Ticket(i));[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        TicketTask ticketTask = new TicketTask(list);[m
[32m+[m[32m        new Curtain(1,ticketTask).start();[m
[32m+[m[32m        new Curtain(2,ticketTask).start();[m
[32m+[m[32m        new Curtain(3,ticketTask).start();[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Dough/Chatpter2/SingleTon.java b/src/main/java/Dough/Chatpter2/SingleTon.java[m
[1mnew file mode 100644[m
[1mindex 0000000..bda436d[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Dough/Chatpter2/SingleTon.java[m
[36m@@ -0,0 +1,50 @@[m
[32m+[m[32mpackage Dough.Chatpter2;[m
[32m+[m
[32m+[m[32mimport java.util.concurrent.Executor;[m
[32m+[m[32mimport java.util.concurrent.ExecutorService;[m
[32m+[m[32mimport java.util.concurrent.Executors;[m
[32m+[m
[32m+[m[32mpublic class SingleTon {[m
[32m+[m[32m    private static SingleTon singleTon;[m
[32m+[m
[32m+[m[32m    private SingleTon(){[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static SingleTon getInstance() throws InterruptedException {[m
[32m+[m[32m        if(singleTon == null){[m
[32m+[m[32m            singleTon = new SingleTon();[m
[32m+[m[32m            System.out.println(Thread.currentThread().getId() + "创建了一个实例");[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return singleTon;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void dosomeThing(){[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        ExecutorService pool = Executors.newCachedThreadPool();[m
[32m+[m[32m        for (int i = 0; i < 1000; i++) {[m
[32m+[m[32m            pool.execute(new Runnable() {[m
[32m+[m[32m                @Override[m
[32m+[m[32m                public void run() {[m
[32m+[m[32m                    new Thread(new Runnable() {[m
[32m+[m[32m                        @Override[m
[32m+[m[32m                        public void run() {[m
[32m+[m[32m                            SingleTon singleTon = null;[m
[32m+[m[32m                            try {[m
[32m+[m[32m                                singleTon = SingleTon.getInstance();[m
[32m+[m[32m                            } catch (InterruptedException e) {[m
[32m+[m[32m                                e.printStackTrace();[m
[32m+[m[32m                            }[m
[32m+[m[32m                            singleTon.dosomeThing();[m
[32m+[m[32m                        }[m
[32m+[m[32m                    }).start();[m
[32m+[m[32m                }[m
[32m+[m[32m            });[m
[32m+[m[32m        }[m
[32m+[m[32m        pool.shutdown();[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Enum.java b/src/main/java/Enum.java[m
[1mnew file mode 100644[m
[1mindex 0000000..0b0a567[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Enum.java[m
[36m@@ -0,0 +1,24 @@[m
[32m+[m[32mimport java.util.Deque;[m
[32m+[m[32mimport java.util.Enumeration;[m
[32m+[m[32mimport java.util.LinkedList;[m
[32m+[m[32mimport java.util.Vector;[m
[32m+[m
[32m+[m[32mpublic class Enum {[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Deque<Integer> stack = new LinkedList<Integer>();[m
[32m+[m
[32m+[m
[32m+[m[32m        stack.offer(1);[m
[32m+[m[32m        stack.offer(2);[m
[32m+[m[32m        stack.offer(3);[m
[32m+[m
[32m+[m[32m        System.out.println(stack.poll());[m
[32m+[m[32m        System.out.println(stack.poll[m
[32m+[m[32m                ());[m
[32m+[m[32m        System.out.println(stack.poll());[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/QuickSort.java b/src/main/java/QuickSort.java[m
[1mnew file mode 100644[m
[1mindex 0000000..0a1df96[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/QuickSort.java[m
[36m@@ -0,0 +1,64 @@[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m
[32m+[m[32mclass Solution {[m
[32m+[m[32m    public String[] findRelativeRanks(int[] score) {[m
[32m+[m[32m        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();[m
[32m+[m[32m        String[] result = new String[score.length ];[m
[32m+[m[32m        for(int i = 0; i < score.length; i ++){[m
[32m+[m[32m            map.put(score[i], i);[m
[32m+[m[32m        }[m
[32m+[m[32m        headSort(score);[m
[32m+[m[32m        for (int i = 0; i < score.length; i++) {[m
[32m+[m[32m            System.out.println(score[i]);[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m        int index = map.get(score[0]);[m
[32m+[m
[32m+[m[32m        result[index] = "Gold Medal";[m
[32m+[m[32m        int index2 = map.get(score[1]);[m
[32m+[m[32m        result[index2] = "Silver Medal";[m
[32m+[m[32m        int index3 = map.get(score[2]);[m
[32m+[m[32m        result[index3] = "Bronze Medal";[m
[32m+[m
[32m+[m[32m        for(int i = 3; i < score.length; i++){[m
[32m+[m[32m            int indexOther = map.get(score[i]);[m
[32m+[m[32m            result[indexOther] = Integer.toString(i+1);[m
[32m+[m[32m        }[m
[32m+[m[32m        return result;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m    public void headSort(int[] arr){[m
[32m+[m[32m        buildHeadSort(arr);[m
[32m+[m[32m        for(int i = 1; i <arr.length ; i++){[m
[32m+[m[32m            maxHead(arr, i, arr.length);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m    public void buildHeadSort(int[] arr){[m
[32m+[m[32m        int n = arr.length;[m
[32m+[m[32m        for(int i = n / 2 - 1; i >= 0 ; i--){[m
[32m+[m[32m            maxHead(arr, i, arr.length );[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m    public void maxHead(int[] arr, int i , int size){[m
[32m+[m[32m        int l = 2*i + 1;[m
[32m+[m[32m        int r = l + 1;[m
[32m+[m[32m        int largest = i;[m
[32m+[m[32m        if( l < size && arr[l] > arr[largest])[m
[32m+[m[32m            largest = l;[m
[32m+[m[32m        if(r < size && arr[r] > arr[largest])[m
[32m+[m[32m            largest = r;[m
[32m+[m[32m        if(largest != i){[m
[32m+[m[32m            swap(arr, i , largest);[m
[32m+[m[32m            maxHead(arr, largest, size);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void swap(int[] arr, int i ,  int j){[m
[32m+[m[32m        arr[i] = arr[i] ^ arr[j];[m
[32m+[m[32m        arr[j] = arr[i] ^ arr[j];[m
[32m+[m[32m        arr[i] = arr[i] ^ arr[j];[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/RunoobTest.java b/src/main/java/RunoobTest.java[m
[1mnew file mode 100644[m
[1mindex 0000000..16bb005[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/RunoobTest.java[m
[36m@@ -0,0 +1,91 @@[m
[32m+[m[32mimport java.util.Collections;[m
[32m+[m[32mimport java.util.LinkedList;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32mpublic class RunoobTest {[m
[32m+[m
[32m+[m[32m    private List synchedList;[m
[32m+[m
[32m+[m[32m    public RunoobTest() {[m
[32m+[m[32m        // 创建一个同步列表[m
[32m+[m[32m        synchedList = Collections.synchronizedList(new LinkedList());[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // 删除列表中的元素[m
[32m+[m[32m    public String removeElement() throws InterruptedException {[m
[32m+[m[32m        synchronized (synchedList) {[m
[32m+[m
[32m+[m[32m            // 列表为空就等待[m
[32m+[m[32m            while (synchedList.isEmpty()) {[m
[32m+[m[32m                System.out.println("List is empty...");[m
[32m+[m[32m                synchedList.wait();[m
[32m+[m[32m                System.out.println("Waiting...");[m
[32m+[m[32m            }[m
[32m+[m[32m            String element = (String) synchedList.remove(0);[m
[32m+[m
[32m+[m[32m            return element;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // 添加元素到列表[m
[32m+[m[32m    public void addElement(String element) {[m
[32m+[m[32m        System.out.println("Opening...");[m
[32m+[m[32m        synchronized (synchedList) {[m
[32m+[m
[32m+[m[32m            // 添加一个元素，并通知元素已存在[m
[32m+[m[32m            synchedList.add(element);[m
[32m+[m[32m            System.out.println("New Element:'" + element + "'");[m
[32m+[m
[32m+[m[32m            synchedList.notifyAll();[m
[32m+[m[32m            System.out.println("notifyAll called!");[m
[32m+[m[32m        }[m
[32m+[m[32m        System.out.println("Closing...");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        final RunoobTest demo = new RunoobTest();[m
[32m+[m
[32m+[m[32m        Runnable runA = new Runnable() {[m
[32m+[m
[32m+[m[32m            public void run() {[m
[32m+[m[32m                try {[m
[32m+[m[32m                    String item = demo.removeElement();[m
[32m+[m[32m                    System.out.println("" + item);[m
[32m+[m[32m                } catch (InterruptedException ix) {[m
[32m+[m[32m                    System.out.println("Interrupted Exception!");[m
[32m+[m[32m                } catch (Exception x) {[m
[32m+[m[32m                    System.out.println("Exception thrown.");[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        };[m
[32m+[m
[32m+[m[32m        Runnable runB = new Runnable() {[m
[32m+[m
[32m+[m[32m            // 执行添加元素操作，并开始循环[m
[32m+[m[32m            public void run() {[m
[32m+[m[32m                demo.addElement("Hello!");[m
[32m+[m[32m            }[m
[32m+[m[32m        };[m
[32m+[m
[32m+[m[32m        try {[m
[32m+[m[32m            Thread threadA1 = new Thread(runA, "Google");[m
[32m+[m[32m            threadA1.start();[m
[32m+[m
[32m+[m[32m            Thread.sleep(500);[m
[32m+[m
[32m+[m[32m            Thread threadA2 = new Thread(runA, "Runoob");[m
[32m+[m[32m            threadA2.start();[m
[32m+[m
[32m+[m[32m            Thread.sleep(500);[m
[32m+[m
[32m+[m[32m            Thread threadB = new Thread(runB, "Taobao");[m
[32m+[m[32m            threadB.start();[m
[32m+[m
[32m+[m[32m            Thread.sleep(1000);[m
[32m+[m
[32m+[m[32m            threadA1.interrupt();[m
[32m+[m[32m            threadA2.interrupt();[m
[32m+[m[32m        } catch (InterruptedException x) {[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/SelectionSort.java b/src/main/java/SelectionSort.java[m
[1mnew file mode 100644[m
[1mindex 0000000..8f1c915[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/SelectionSort.java[m
[36m@@ -0,0 +1,77 @@[m
[32m+[m[32mimport java.util.Arrays;[m
[32m+[m
[32m+[m[32mpublic class SelectionSort {[m
[32m+[m
[32m+[m[32m    public int selectionSort1(int arr[]) {[m
[32m+[m[32m        int minIndex = 0;[m
[32m+[m[32m        int counti = 0;[m
[32m+[m[32m        int countj = 0;[m
[32m+[m
[32m+[m[32m        for (int i = 0; i < arr.length - 1; i++) {[m
[32m+[m[32m            minIndex = i;[m
[32m+[m[32m            counti++;[m
[32m+[m[32m            for (int j = i; j < arr.length; j++) {[m
[32m+[m[32m                countj++;[m
[32m+[m[32m                if (arr[j] < arr[minIndex]) {[m
[32m+[m[32m                    minIndex = j;[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m            swap(arr, minIndex, i);[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m        return counti + countj;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public int selectionSort2(int [] arr){[m
[32m+[m[32m        int minIndex = 0;[m
[32m+[m[32m        int maxIndex = 0;[m
[32m+[m[32m        int counti = 0;[m
[32m+[m[32m        int countj = 0;[m
[32m+[m[32m        for (int i = 0; i < arr.length /2 ; i++) {[m
[32m+[m[32m            minIndex = i;[m
[32m+[m[32m            maxIndex = i;[m
[32m+[m[32m            counti++;[m
[32m+[m[32m            for (int j = i + 1; j < arr.length - i; j++) {[m
[32m+[m[32m                if(arr[maxIndex] < arr[j]){[m
[32m+[m[32m                    maxIndex = j;[m
[32m+[m[32m                }[m
[32m+[m[32m                if(arr[minIndex] > arr[j]){[m
[32m+[m[32m                    minIndex = j;[m
[32m+[m[32m                }[m
[32m+[m[32m                countj += 2;[m
[32m+[m[32m            }[m
[32m+[m[32m            if(maxIndex == minIndex) break;[m
[32m+[m[32m            swap(arr,i, minIndex );[m
[32m+[m
[32m+[m[32m            int currentLastIndex = arr.length - i - 1;[m
[32m+[m[32m            if(maxIndex == i) maxIndex = minIndex;[m
[32m+[m[32m            swap(arr, maxIndex, currentLastIndex);[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m        return counti + countj;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public  void swap(int [] array, int i , int j){[m
[32m+[m[32m        int temp = array[i];[m
[32m+[m[32m        array[i] = array[j];[m
[32m+[m[32m        array[j] = temp;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        int[] arr = {13, 7, 8, 9, 11, 85, 4156, 1223, 51, 123};[m
[32m+[m[32m        SelectionSort c1 = new SelectionSort();[m
[32m+[m[32m        int s2 =  c1.selectionSort2(arr);[m
[32m+[m[32m        int s1 = c1.selectionSort1(arr);[m
[32m+[m[32m        System.out.println(s1);[m
[32m+[m[32m        System.out.println(s2);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/Test.class b/src/main/java/Test.class[m
[1mnew file mode 100644[m
[1mindex 0000000..d7ebb3f[m
Binary files /dev/null and b/src/main/java/Test.class differ
[1mdiff --git a/src/main/java/Test.java b/src/main/java/Test.java[m
[1mnew file mode 100644[m
[1mindex 0000000..5cfc294[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/Test.java[m
[36m@@ -0,0 +1,59 @@[m
[32m+[m[32mimport java.util.Deque;[m
[32m+[m[32mimport java.util.LinkedList;[m
[32m+[m[32mimport java.util.Stack;[m
[32m+[m
[32m+[m[32mpublic class Test {[m
[32m+[m
[32m+[m[32m    public static class findWords {[m
[32m+[m[32m        boolean flag = false;[m
[32m+[m[32m        public boolean findWords(char[][]set, String word){[m
[32m+[m[32m            boolean[][]map = new boolean[set.length][set[0].length];[m
[32m+[m[32m            for(int i = 0 ; i < set.length; i ++){[m
[32m+[m[32m                for(int j = 0; j < set[0].length; j ++){[m
[32m+[m[32m                    if(set[i][j] == word.charAt(0)){[m
[32m+[m[32m                        dfs(set, word, i, j, 0, map);[m
[32m+[m[32m                        if(flag)[m
[32m+[m[32m                            return true;[m
[32m+[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m            return  false;[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void dfs(char[][]set, String word, int start , int end,int count,boolean[][] map){[m
[32m+[m
[32m+[m[32m            if(start < 0 || end < 0 || start > set.length -1 || end > set[0].length - 1 || set[start][end] != word.charAt(count) || map[start][end])[m
[32m+[m[32m                    return ;[m
[32m+[m
[32m+[m[32m            map[start][end] = true;[m
[32m+[m[32m            count++;[m
[32m+[m[32m            if(count == word.length()){[m
[32m+[m[32m                flag = true;[m
[32m+[m[32m                return;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            dfs(set, word, start + 1, end , count, map);[m
[32m+[m[32m            dfs(set, word, start - 1, end , count, map);[m
[32m+[m[32m            dfs(set, word, start , end + 1, count, map);[m
[32m+[m[32m            dfs(set, word, start , end - 1, count, map);[m
[32m+[m
[32m+[m[32m            map[start][end] = false;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        findWords solution = new findWords();[m
[32m+[m[32m        char[][]set = new char[][]{{'X','Y','Z','E'}, {'S','F','Z','S'},{'X','D','E','E'}};[m
[32m+[m[32m        boolean flag = solution.findWords(set, "SFZSEZYXS");[m
[32m+[m[32m        System.out.println(flag);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/arrarylist.class b/src/main/java/arrarylist.class[m
[1mnew file mode 100644[m
[1mindex 0000000..469aaae[m
Binary files /dev/null and b/src/main/java/arrarylist.class differ
[1mdiff --git a/src/main/java/arrarylist.java b/src/main/java/arrarylist.java[m
[1mnew file mode 100644[m
[1mindex 0000000..f47f7e6[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/arrarylist.java[m
[36m@@ -0,0 +1,65 @@[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m[32mimport java.util.Collection;[m
[32m+[m[32mimport java.util.Collections;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32mpublic class arrarylist {[m
[32m+[m
[32m+[m[32m    static List<String>list;[m
[32m+[m[32m    public static List<String> addOperators(String num, int target) {[m
[32m+[m[32m        list = new ArrayList<>();[m
[32m+[m[32m        StringBuffer sb = new StringBuffer();[m
[32m+[m[32m        dfs(num, 0,target, sb, 0, 0);[m
[32m+[m
[32m+[m[32m        return list;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void dfs(String num, int index, int target, StringBuffer sb, long res, long prev){[m
[32m+[m
[32m+[m[32m        if(index == num.length()){[m
[32m+[m[32m            if(res == target){[m
[32m+[m[32m                list.add(sb.toString());[m
[32m+[m[32m            }[m
[32m+[m[32m            return;[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m[32m        for(int i = index + 1; i <= num.length(); i++){[m
[32m+[m[32m            String cur = num.substring(index, i);[m
[32m+[m[32m            int curNum = Integer.parseInt(cur);[m
[32m+[m[32m            if(index == 0){[m
[32m+[m[32m                sb.append(cur);[m
[32m+[m[32m                dfs(num, i, target, sb, curNum, curNum);[m
[32m+[m[32m                sb.delete(sb.length() - cur.length(), sb.length());[m
[32m+[m[32m            }[m
[32m+[m[32m            else{[m
[32m+[m[32m                sb.append("*");[m
[32m+[m[32m                sb.append(cur);[m
[32m+[m[32m                dfs(num, i, target, sb, res - curNum + curNum * prev, curNum * prev);[m
[32m+[m[32m                sb.delete(sb.length() - cur.length() - 1, sb.length());[m
[32m+[m[32m                sb.append("+");[m
[32m+[m[32m                sb.append(cur);[m
[32m+[m[32m                dfs(num, i, target, sb, res + curNum, curNum);[m
[32m+[m[32m                sb.delete(sb.length() - cur.length() - 1, sb.length());[m
[32m+[m[32m                sb.append("-");[m
[32m+[m[32m                sb.append(cur);[m
[32m+[m[32m                dfs(num, i, target, sb, res - curNum, -curNum);[m
[32m+[m[32m                sb.delete(sb.length() - cur.length() - 1, sb.length());[m
[32m+[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        addOperators("123", 7);[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/Meituan/Solution4.java b/src/main/java/com/Meituan/Solution4.java[m
[1mnew file mode 100644[m
[1mindex 0000000..23b2df2[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/Meituan/Solution4.java[m
[36m@@ -0,0 +1,43 @@[m
[32m+[m[32mpackage com.Meituan;[m
[32m+[m
[32m+[m[32mimport java.util.Scanner;[m
[32m+[m
[32m+[m[32mpublic class Solution4 {[m
[32m+[m[32m    static class Node{[m
[32m+[m[32m        int val;[m
[32m+[m[32m        Node next;[m
[32m+[m
[32m+[m[32m        public Node(int val){[m
[32m+[m[32m            this.val = val;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static Node reverseNode(Node node){[m
[32m+[m[32m        Node prev = null;[m
[32m+[m
[32m+[m[32m        while(node != null){[m
[32m+[m[32m            Node temp = node.next;[m
[32m+[m[32m            node.next = prev;[m
[32m+[m[32m            prev = node;[m
[32m+[m[32m            node = temp;[m
[32m+[m[32m        }[m
[32m+[m[32m        return prev;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Node head = new Node(3);[m
[32m+[m[32m        head.next = new Node(4);[m
[32m+[m[32m        head.next.next = new Node(6);[m
[32m+[m
[32m+[m[32m        Node res = reverseNode(head);[m
[32m+[m
[32m+[m[32m        while(res != null){[m
[32m+[m[32m            System.out.println(res.val);[m
[32m+[m[32m            res = res.next;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/Meituan/WangYi.java b/src/main/java/com/Meituan/WangYi.java[m
[1mnew file mode 100644[m
[1mindex 0000000..2e2603e[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/Meituan/WangYi.java[m
[36m@@ -0,0 +1,86 @@[m
[32m+[m[32mpackage com.Meituan;[m
[32m+[m
[32m+[m[32mimport com.sun.jdi.Value;[m
[32m+[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class WangYi {[m
[32m+[m
[32m+[m
[32m+[m[32m    public void findMaxResult(String[]username, int[]timeStamp, String[]website){[m
[32m+[m[32m        Map<String,ArrayList<String>> map = new HashMap<>();[m
[32m+[m[32m        String name = username[0];[m
[32m+[m[32m        ArrayList<String>temp = new ArrayList<>();[m
[32m+[m[32m        temp.add(website[0]);[m
[32m+[m[32m        for(int i= 1; i < username.length;i++){[m
[32m+[m[32m            if(!username[i].equals(name)){[m
[32m+[m[32m                temp = new ArrayList<>();[m
[32m+[m[32m                name = username[i];[m
[32m+[m[32m            }[m
[32m+[m[32m            temp.add(website[i]);[m
[32m+[m[32m            map.put(name, new ArrayList<>(temp));[m
[32m+[m[32m        }[m
[32m+[m[32m        TreeMap<String, Integer>res  = new TreeMap<>();[m
[32m+[m[32m        List<Map.Entry<String,Integer>> mappingList = null;[m
[32m+[m
[32m+[m[32m        ArrayList<String>tempList = new ArrayList<>();[m
[32m+[m[32m        Map<String, List<String>>tempMap = new HashMap<>();[m
[32m+[m[32m        for(String s : map.keySet()){[m
[32m+[m[32m            ArrayList<String>list = map.get(s);[m
[32m+[m[32m            parseString(res, list, 0, tempList, 0, tempMap);[m
[32m+[m[32m        }[m
[32m+[m[32m        mappingList = new ArrayList<Map.Entry<String,Integer>>(res.entrySet());[m
[32m+[m
[32m+[m[32m        Collections.sort(mappingList, new Comparator<Map.Entry<String,Integer>>(){[m
[32m+[m[32m            public int compare(Map.Entry<String,Integer> mapping1,Map.Entry<String,Integer> mapping2){[m
[32m+[m[32m                return mapping1.getValue() - mapping2.getValue() == 0? mapping1.getKey().compareTo(mapping2.getKey()) : mapping2.getValue() - mapping1.getValue();[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        Map.Entry<String,Integer> mapping = mappingList.get(0);[m
[32m+[m[32m        String s = mapping.getKey();[m
[32m+[m[32m        List<String>r = tempMap.get(s);[m
[32m+[m[32m        for(int i = 0; i < r.size(); i++){[m
[32m+[m[32m            System.out.println(r.get(i));[m
[32m+[m[32m        }[m
[32m+[m[32m        return;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void parseString(TreeMap<String,Integer>map, List<String>list, int index, List<String>tempList, int time,Map<String, List<String>>tempMap){[m
[32m+[m[32m        if(tempList.size() == 3){[m
[32m+[m[32m            String s = listToString(tempList);[m
[32m+[m[32m            tempMap.put(s, new ArrayList<>(tempList));[m
[32m+[m[32m            map.put(s, map.getOrDefault(s, 0) + 1);[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m[32m        for(int i = index; i < list.size(); i++){[m
[32m+[m[32m            tempList.add(list.get(i));[m
[32m+[m[32m            parseString(map, list, i + 1, tempList, time + 1,tempMap);[m
[32m+[m[32m            tempList.remove(tempList.size() - 1);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public String listToString(List<String>list){[m
[32m+[m[32m        String res = "";[m
[32m+[m[32m        for(int i = 0; i < list.size(); i++){[m
[32m+[m[32m            res += list.get(i);[m
[32m+[m[32m        }[m
[32m+[m[32m        return res;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        String[]username = new String[]{"joe","joe","joe","james","james","james","james","mary","mary","mary"};[m
[32m+[m[32m        int[]timeStamp = new int[]{1,2,3,4,5,6,7,8,9,10};[m
[32m+[m[32m        String[]website = new String[]{"home","about","career","home","cart","maps","home","home","about","career"};[m
[32m+[m[32m        WangYi s = new WangYi();[m
[32m+[m[32m        s.findMaxResult(username,timeStamp,website);[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/Meituan/solution1.java b/src/main/java/com/Meituan/solution1.java[m
[1mnew file mode 100644[m
[1mindex 0000000..da6c873[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/Meituan/solution1.java[m
[36m@@ -0,0 +1,40 @@[m
[32m+[m[32mpackage com.Meituan;[m
[32m+[m
[32m+[m[32mimport java.util.Arrays;[m
[32m+[m
[32m+[m[32mpublic class solution1 {[m
[32m+[m
[32m+[m[32m    public static int findMaxSize(int[]array, int size){[m
[32m+[m[32m        Arrays.sort(array);[m
[32m+[m[32m        int[]dp = new int[array.length];[m
[32m+[m[32m        dp[0] = 1;[m
[32m+[m[32m        int temp = array[1] - array[0];[m
[32m+[m[32m        if(temp > 1)[m
[32m+[m[32m            dp[1] = 2;[m
[32m+[m[32m        else[m
[32m+[m[32m            dp[1] = 1;[m
[32m+[m[32m        for(int i = 2; i < array.length; i++){[m
[32m+[m[32m            if(array[i] - array[i-1] > 1)[m
[32m+[m[32m                dp[i] = dp[i-1] + 1;[m
[32m+[m[32m            else if(array[i] == array[i-1])[m
[32m+[m[32m                dp[i] = dp[i-1];[m
[32m+[m[32m            else{[m
[32m+[m[32m                int prev = i-1;[m
[32m+[m[32m                while(prev >0 && array[prev] == array[i-1]){[m
[32m+[m[32m                    prev--;[m
[32m+[m[32m                }[m
[32m+[m[32m                dp[i] = Math.max(dp[i-1], dp[prev] + 1);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return dp[array.length - 1];[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        int[]array = new int[]{1,2,3,5,6,7};[m
[32m+[m[32m        int size = 6;[m
[32m+[m[32m        int res = findMaxSize(array,size);[m
[32m+[m[32m        System.out.println(res);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/Meituan/solution2.java b/src/main/java/com/Meituan/solution2.java[m
[1mnew file mode 100644[m
[1mindex 0000000..8e8b52e[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/Meituan/solution2.java[m
[36m@@ -0,0 +1,46 @@[m
[32m+[m[32mpackage com.Meituan;[m
[32m+[m
[32m+[m[32mpublic class solution2 {[m
[32m+[m
[32m+[m[32m    public static int findMaxSum(int[]array){[m
[32m+[m
[32m+[m[32m        //建立一个包含当前数值的最大子序列和;[m
[32m+[m[32m        int n = array.length;[m
[32m+[m[32m        int sum = 0;[m
[32m+[m[32m        int[]containsDp = new int[n];[m
[32m+[m
[32m+[m[32m        for(int i = 0; i < n; i++){[m
[32m+[m[32m            if(sum <= 0)[m
[32m+[m[32m                sum = 0;[m
[32m+[m[32m            containsDp[i] = array[i] + sum;[m
[32m+[m[32m            sum += array[i];[m
[32m+[m[32m        }[m
[32m+[m[32m        //建立一个到目前index中，最大子序列是多少;[m
[32m+[m[32m        int[]useDp = new int[n];[m
[32m+[m[32m        useDp[0] = containsDp[0];[m
[32m+[m[32m        for(int i = 1; i < n ;i++){[m
[32m+[m[32m            //对于每一个index来说，可以包含自己，也可以不包含自己;[m
[32m+[m[32m            useDp[i] = Math.max(useDp[i-1], containsDp[i]);[m
[32m+[m[32m        }[m
[32m+[m[32m        //反转的话就是我们可以使用前一个的最大子序列和；[m
[32m+[m[32m        int res = array[0];[m
[32m+[m[32m        int[]reverseDp = new int[n];[m
[32m+[m[32m        for(int i = 1; i < n; i++){[m
[32m+[m[32m            reverseDp[i] = Math.max(array[i], array[i] + useDp[i-1]);[m
[32m+[m[32m            reverseDp[i] = Math.max(reverseDp[i], array[i] + reverseDp[i-1]);[m
[32m+[m[32m            res = Math.max(res, reverseDp[i]);[m
[32m+[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return res;[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        int[]array = new int[]{-1,3,-5,2,-1,3};[m
[32m+[m[32m        int res = findMaxSum(array);[m
[32m+[m[32m        System.out.println(res);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/Meituan/solution3.java b/src/main/java/com/Meituan/solution3.java[m
[1mnew file mode 100644[m
[1mindex 0000000..d6192e5[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/Meituan/solution3.java[m
[36m@@ -0,0 +1,66 @@[m
[32m+[m[32mpackage com.Meituan;[m
[32m+[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m[32mimport java.util.Collection;[m
[32m+[m[32mimport java.util.Collections;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32mpublic class solution3 {[m
[32m+[m
[32m+[m[32m    public static List<Integer>findMaxVolumn(int[]size, char[]direction, int[]depth){[m
[32m+[m[32m        int time = size[1];[m
[32m+[m[32m        int inititalSize = size[0];[m
[32m+[m[32m        List<Integer>x = new ArrayList<>();[m
[32m+[m[32m        List<Integer>y = new ArrayList<>();[m
[32m+[m[32m        List<Integer>z = new ArrayList<>();[m
[32m+[m[32m        x.add(0); x.add(inititalSize);[m
[32m+[m[32m        y.add(0); y.add(inititalSize);[m
[32m+[m[32m        z.add(0); z.add(inititalSize);[m
[32m+[m[32m        List<Integer>res = new ArrayList<>();[m
[32m+[m[32m        int curX = inititalSize;[m
[32m+[m[32m        int curY = inititalSize;[m
[32m+[m[32m        int curZ = inititalSize;[m
[32m+[m[32m        for(int i = 0; i < time; i++){[m
[32m+[m[32m            char c = direction[i];[m
[32m+[m[32m            if(c == 'x'){[m
[32m+[m[32m                x.add(depth[i]);[m
[32m+[m[32m                curX = findMax(x);[m
[32m+[m[32m            }[m
[32m+[m[32m            else if(c == 'y'){[m
[32m+[m[32m                y.add(depth[i]);[m
[32m+[m[32m                curY = findMax(y);[m
[32m+[m[32m            }[m
[32m+[m[32m            else if(c == 'z'){[m
[32m+[m[32m                z.add(depth[i]);[m
[32m+[m[32m                curZ = findMax(z);[m
[32m+[m[32m            }[m
[32m+[m[32m            int tempRes = curX * curY * curZ;[m
[32m+[m[32m            res.add(tempRes);[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m        return res;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static int findMax(List<Integer>list){[m
[32m+[m[32m        int res = 0;[m
[32m+[m[32m        Collections.sort(list);[m
[32m+[m
[32m+[m[32m        for(int i = 1; i < list.size(); i++){[m
[32m+[m[32m            res = Math.max(res, list.get(i) - list.get(i-1));[m
[32m+[m[32m        }[m
[32m+[m[32m        return res;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        int[]size = new int[]{2,3};[m
[32m+[m[32m        char[]direction = new char[]{'x','y','z'};[m
[32m+[m[32m        int[]depth = new int[]{1,1,1};[m
[32m+[m
[32m+[m[32m        List<Integer>list = findMaxVolumn(size,direction,depth);[m
[32m+[m
[32m+[m[32m        for(int i = 0; i < list.size(); i++){[m
[32m+[m[32m            System.out.println(list.get(i));[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/Meituan/solution5.java b/src/main/java/com/Meituan/solution5.java[m
[1mnew file mode 100644[m
[1mindex 0000000..3b25fd1[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/Meituan/solution5.java[m
[36m@@ -0,0 +1,39 @@[m
[32m+[m[32mpackage com.Meituan;[m
[32m+[m
[32m+[m[32mimport java.util.Timer;[m
[32m+[m
[32m+[m[32mpublic class solution5 {[m
[32m+[m[32m    public static boolean isLuckyNum(int n){[m
[32m+[m[32m        if(n % 11 != 0)[m
[32m+[m[32m            return false;[m
[32m+[m
[32m+[m[32m        int num = 0;[m
[32m+[m
[32m+[m[32m        while(n != 0){[m
[32m+[m[32m            int temp = n % 10;[m
[32m+[m[32m            if(temp == 1)[m
[32m+[m[32m                num++;[m
[32m+[m[32m            if(num >= 2)[m
[32m+[m[32m                return true;[m
[32m+[m[32m            n = n /10;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return false;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        long time = System.currentTimeMillis();[m
[32m+[m[32m        boolean temp = isLuckyNum(11);[m
[32m+[m[32m        System.out.println(temp);[m
[32m+[m[32m        int ini = 1000000000;[m
[32m+[m[32m        for(int i = 0; i < 500; i++){[m
[32m+[m[32m            boolean luckyNum = isLuckyNum(i);[m
[32m+[m[32m            ini ++;[m
[32m+[m[32m        }[m
[32m+[m[32m        long end = System.currentTimeMillis();[m
[32m+[m
[32m+[m[32m        System.out.println(end - time);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/Meituan/solution6.java b/src/main/java/com/Meituan/solution6.java[m
[1mnew file mode 100644[m
[1mindex 0000000..750bd89[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/Meituan/solution6.java[m
[36m@@ -0,0 +1,32 @@[m
[32m+[m[32mpackage com.Meituan;[m
[32m+[m
[32m+[m[32mpublic class solution6 {[m
[32m+[m
[32m+[m[32m    public static int findmaxSubArraySize(int[]array){[m
[32m+[m[32m        //寻找数组中乘积为正的子序列，在子序列中，1的个数大于等于-1;[m
[32m+[m[32m        //和 》= 0;[m
[32m+[m[32m        int res = 0;[m
[32m+[m[32m        for(int i = 0; i < array.length; i++){[m
[32m+[m[32m            int sum = 0;[m
[32m+[m[32m            if(array[i] == -1)[m
[32m+[m[32m                sum++;[m
[32m+[m[32m            for(int j = i +1; j < array.length; j++){[m
[32m+[m[32m                if(array[j] == -1)[m
[32m+[m[32m                    sum++;[m
[32m+[m[32m                if(sum % 2 == 0)[m
[32m+[m[32m                    res++;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return res;[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        int[]array = new int[]{1,1,-1,-1};[m
[32m+[m[32m        int res = findmaxSubArraySize(array);[m
[32m+[m[32m        System.out.println(res);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/Meituan/solution7.java b/src/main/java/com/Meituan/solution7.java[m
[1mnew file mode 100644[m
[1mindex 0000000..fbff0ad[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/Meituan/solution7.java[m
[36m@@ -0,0 +1,86 @@[m
[32m+[m[32mpackage com.Meituan;[m
[32m+[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class solution7 {[m
[32m+[m[32m    public static int findMaxCustomer(int n, int m, List<int[]> list ){[m
[32m+[m[32m        PriorityQueue<int[]>queue = new PriorityQueue<>(new Comparator<int[]>() {[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public int compare(int[] o1, int[] o2) {[m
[32m+[m[32m                return o1[1] - o2[1];[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
[32m+[m[32m        Map<Integer,ArrayList<Integer>>map = new HashMap<>();[m
[32m+[m[32m        int[]a = new int[m + 1];[m
[32m+[m[32m        for(int[]temp :list){[m
[32m+[m[32m            a[temp[0]]++;[m
[32m+[m[32m            a[temp[1]]++;[m
[32m+[m[32m            ArrayList<Integer>tempList = map.getOrDefault(temp[0], new ArrayList<>());[m
[32m+[m[32m            if(!tempList.contains(temp[1]))[m
[32m+[m[32m                tempList.add(temp[1]);[m
[32m+[m[32m            map.put(temp[0], tempList);[m
[32m+[m[32m            ArrayList<Integer>tempList1 = map.getOrDefault(temp[1], new ArrayList<>());[m
[32m+[m[32m            if(!tempList1.contains(temp[0]))[m
[32m+[m[32m                tempList1.add(temp[0]);[m
[32m+[m[32m            map.put(temp[1], tempList1);[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m        for(int i = 0; i <= m; i++){[m
[32m+[m[32m            if(a[i] != 0){[m
[32m+[m[32m                int[]t = new int[2];[m
[32m+[m[32m                t[0] = i;[m
[32m+[m[32m                t[1] = a[i];[m
[32m+[m[32m                queue.offer(t);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        int res = 0;[m
[32m+[m[32m        Set<Integer>set = new HashSet<>();[m
[32m+[m[32m        while(!queue.isEmpty()){[m
[32m+[m[32m            int[]temp = queue.poll();[m
[32m+[m[32m            if(set.contains(temp[0]))[m
[32m+[m[32m                continue;[m
[32m+[m[32m            set.add(temp[0]);[m
[32m+[m[32m            ArrayList<Integer>tempList = map.get(temp[0]);[m
[32m+[m[32m            int t = tempList.get(0);[m
[32m+[m[32m            boolean isChanged = true;[m
[32m+[m[32m            for(int i = 0; i < tempList.size(); i++){[m
[32m+[m[32m                if(a[tempList.get(i)] <= a[t] && !set.contains(tempList.get(i))) {[m
[32m+[m[32m                    t = tempList.get(i);[m
[32m+[m[32m                    isChanged = false;[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m            if(isChanged) {[m
[32m+[m[32m                set.remove(temp[0]);[m
[32m+[m[32m                continue;[m
[32m+[m[32m            }[m
[32m+[m[32m            set.add(t);[m
[32m+[m[32m            res++;[m
[32m+[m[32m        }[m
[32m+[m[32m        return res;[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        int n = 3;[m
[32m+[m[32m        int m = 9;[m
[32m+[m[32m        List<int[]>list = new ArrayList<>();[m
[32m+[m[32m        int[]a = new int[]{1,2};[m
[32m+[m[32m        int[]b = new int[]{1,3};[m
[32m+[m[32m        int[]c = new int[]{1,4};[m
[32m+[m[32m        int[]d = new int[]{5,4};[m
[32m+[m[32m        int[]p = new int[]{2,7};[m
[32m+[m[32m        int[]k = new int[]{5,6};[m
[32m+[m[32m        int[]q = new int[]{8,9};[m
[32m+[m[32m        list.add(a);[m
[32m+[m[32m        list.add(b);[m
[32m+[m[32m        list.add(c);[m
[32m+[m[32m        list.add(d);[m
[32m+[m[32m        list.add(q);[m
[32m+[m[32m        list.add(k);[m
[32m+[m[32m        list.add(p);[m
[32m+[m[32m        int res = findMaxCustomer(n,m,list);[m
[32m+[m[32m        System.out.println(res);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/Meituan/solution8.java b/src/main/java/com/Meituan/solution8.java[m
[1mnew file mode 100644[m
[1mindex 0000000..c6a393f[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/Meituan/solution8.java[m
[36m@@ -0,0 +1,62 @@[m
[32m+[m[32mpackage com.Meituan;[m
[32m+[m
[32m+[m[32mclass Solution {[m
[32m+[m[32m    public class Trie{[m
[32m+[m[32m        char val;[m
[32m+[m[32m        Trie[]array;[m
[32m+[m
[32m+[m[32m        public Trie(char val){[m
[32m+[m[32m            this.val = val;[m
[32m+[m[32m            this.array = new Trie[10];[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m    Trie head;[m
[32m+[m[32m    int res;[m
[32m+[m[32m    int time;[m
[32m+[m[32m    public void insert(int val){[m
[32m+[m[32m        String s = val +"";[m
[32m+[m[32m        Trie cur = head;[m
[32m+[m[32m        for(int i = 0; i < s.length(); i++){[m
[32m+[m[32m            char temp = s.charAt(i);[m
[32m+[m[32m            if(cur.array[temp -'0'] == null){[m
[32m+[m[32m                Trie t = new Trie(temp);[m
[32m+[m[32m                cur.array[temp - '0'] = t;[m
[32m+[m[32m            }[m
[32m+[m[32m            cur = cur.array[temp -'0'];[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m    public int findKthNumber(int n, int k) {[m
[32m+[m[32m        head = new Trie('0');[m
[32m+[m[32m        for(int i = 1; i <= n; i++){[m
[32m+[m[32m            insert(i);[m
[32m+[m[32m        }[m
[32m+[m[32m        Trie cur = head;[m
[32m+[m[32m        time = k + 1;[m
[32m+[m[32m        StringBuilder sb = new StringBuilder();[m
[32m+[m[32m        dfs(head, sb);[m
[32m+[m[32m        return res;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void dfs(Trie cur, StringBuilder sb){[m
[32m+[m[32m        if(cur == null){[m
[32m+[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m[32m        time--;[m
[32m+[m[32m        sb.append(cur.val);[m
[32m+[m[32m        if(time == 0){[m
[32m+[m[32m            res = Integer.parseInt(sb.toString());[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m[32m        for(int i = 0; i < 10; i++){[m
[32m+[m[32m            dfs(cur.array[i], sb);[m
[32m+[m[32m        }[m
[32m+[m[32m        sb.deleteCharAt(sb.length() - 1);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Solution s = new Solution();[m
[32m+[m[32m        System.out.println(s.findKthNumber(4289384,1922239));[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/com/Rand.java b/src/main/java/com/Rand.java[m
[1mnew file mode 100644[m
[1mindex 0000000..6a064ac[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/Rand.java[m
[36m@@ -0,0 +1,57 @@[m
[32m+[m[32mpackage com;[m
[32m+[m
[32m+[m[32mimport java.util.Random;[m
[32m+[m
[32m+[m[32mpublic class Rand {[m
[32m+[m
[32m+[m[32m    public static int rand5(){[m
[32m+[m[32m       Random random = new Random();[m
[32m+[m[32m       return random.nextInt(5) + 1;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static int rand11(){[m
[32m+[m[32m        int num = rand16();[m
[32m+[m[32m        while(num > 11){[m
[32m+[m[32m            num = rand16();[m
[32m+[m[32m        }[m
[32m+[m[32m        return num;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static int rand8(){[m
[32m+[m[32m        int num1 = rand5();[m
[32m+[m[32m        while(num1 == 5){[m
[32m+[m[32m            num1 = rand5();[m
[32m+[m[32m        }[m
[32m+[m[32m        int first = num1 % 2;[m
[32m+[m
[32m+[m[32m        int second = rand5();[m
[32m+[m[32m        while(second == 5){[m
[32m+[m[32m            second = rand5();[m
[32m+[m[32m        }[m
[32m+[m[32m        return first == 0? second : 4 + second;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static int rand16(){[m
[32m+[m[32m        int num1 = rand8();[m
[32m+[m
[32m+[m[32m        int first = num1 % 2;[m
[32m+[m
[32m+[m[32m        int second = rand8();[m
[32m+[m[32m        return first == 0? second : 8 + second;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        int time = 0;[m
[32m+[m[32m        int k = 10000;[m
[32m+[m[32m        while(k > 0){[m
[32m+[m[32m            int temp = rand11();[m
[32m+[m[32m            if(temp == 7)[m
[32m+[m[32m                    time++;[m
[32m+[m[32m            k--;[m
[32m+[m[32m        }[m
[32m+[m[32m        System.out.println((double) time / 10000);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[1mdiff --git a/src/main/java/com/Solution_1.java b/src/main/java/com/Solution_1.java[m
[1mnew file mode 100644[m
[1mindex 0000000..8273691[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/Solution_1.java[m
[36m@@ -0,0 +1,49 @@[m
[32m+[m[32mpackage com;[m
[32m+[m
[32m+[m[32mimport java.lang.reflect.Array;[m
[32m+[m[32mimport java.util.Arrays;[m
[32m+[m[32mimport java.util.Scanner;[m
[32m+[m
[32m+[m[32mclass Solution_1 {[m
[32m+[m[32m    public static String convert(String s, int rowNums){[m
[32m+[m[32m        s.replace("", "Wa");[m
[32m+[m[32m        if(s.length() == 1)[m
[32m+[m[32m                return null;[m
[32m+[m[32m        int n = s.length();[m
[32m+[m[32m        int charNums = 2 * rowNums - 2;[m
[32m+[m[32m        int colNums = (n / charNums + 1) * (rowNums - 1);[m
[32m+[m
[32m+[m[32m        char[][]temp = new char[rowNums][colNums];[m
[32m+[m[32m        int rowIndex = 0;[m
[32m+[m[32m        int colIndex = 0;[m
[32m+[m[32m        for(int i = 0; i < s.length(); i++){[m
[32m+[m[32m            temp[rowIndex][colIndex] = s.charAt(i);[m
[32m+[m
[32m+[m[32m            if(i % charNums >= rowNums - 1){[m
[32m+[m[32m                rowIndex--;[m
[32m+[m[32m                colIndex++;[m
[32m+[m[32m            }[m
[32m+[m[32m            else[m
[32m+[m[32m                rowIndex++;[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m        StringBuilder sb = new StringBuilder();[m
[32m+[m
[32m+[m[32m        for(int i = 0; i < temp.length; i++){[m
[32m+[m[32m            for(int j = 0; j < temp[0].length; j++){[m
[32m+[m[32m                if(temp[i][j] != '0')[m
[32m+[m[32m                    sb.append(temp[i][j]);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        System.out.println(sb.toString());[m
[32m+[m[32m        return sb.toString();[m
[32m+[m[32m    }[m
[32m+[m[32m    public static void main(String[] args){[m
[32m+[m[32m        Scanner scanner = new Scanner(System.in);[m
[32m+[m[32m        String s = scanner.nextLine();[m
[32m+[m[32m        System.out.println(convert(s, 3));[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/com/Student.java b/src/main/java/com/Student.java[m
[1mnew file mode 100644[m
[1mindex 0000000..be7c484[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/Student.java[m
[36m@@ -0,0 +1,28 @@[m
[32m+[m[32mpackage com;[m
[32m+[m
[32m+[m[32mimport java.util.Objects;[m
[32m+[m
[32m+[m[32mpublic class Student {[m
[32m+[m[32m    int id;[m
[32m+[m[32m    String name;[m
[32m+[m
[32m+[m[32m    public Student(int id, String name) {[m
[32m+[m[32m        this.id = id;[m
[32m+[m[32m        this.name = name;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public boolean equals(Object o) {[m
[32m+[m[32m        if (this == o) return true;[m
[32m+[m[32m        if (!(o instanceof Student)) return false;[m
[32m+[m[32m        Student student = (Student) o;[m
[32m+[m[32m        return id == student.id && name.equals(student.name);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    @Override[m
[32m+[m[32m    public int hashCode() {[m
[32m+[m[32m        return Objects.hash(id, name);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[1mdiff --git a/src/main/java/com/multi/Father.java b/src/main/java/com/multi/Father.java[m
[1mnew file mode 100644[m
[1mindex 0000000..c522091[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/multi/Father.java[m
[36m@@ -0,0 +1,17 @@[m
[32m+[m[32mpackage com.multi;[m
[32m+[m
[32m+[m[32mpublic class Father {[m
[32m+[m
[32m+[m[32m    int x = 1;[m
[32m+[m[32m    static int m = 1;[m
[32m+[m
[32m+[m[32m    public Father(){[m
[32m+[m[32m        System.out.println("father");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public Father(String s){[m
[32m+[m[32m        System.out.println("father" + s);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/multi/Son.java b/src/main/java/com/multi/Son.java[m
[1mnew file mode 100644[m
[1mindex 0000000..bd24f3f[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/multi/Son.java[m
[36m@@ -0,0 +1,15 @@[m
[32m+[m[32mpackage com.multi;[m
[32m+[m
[32m+[m[32mpublic class Son extends Father{[m
[32m+[m
[32m+[m[32m    int x = 2;[m
[32m+[m
[32m+[m[32m    public Son(){[m
[32m+[m[32m        System.out.println("son");[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public Son(String s){[m
[32m+[m[32m        System.out.println("son" + s);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/multi/hello.java b/src/main/java/com/multi/hello.java[m
[1mnew file mode 100644[m
[1mindex 0000000..ddea12e[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/multi/hello.java[m
[36m@@ -0,0 +1,7 @@[m
[32m+[m[32mpackage com.multi;[m
[32m+[m
[32m+[m[32mpublic class hello {[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        System.out.println(Son.m);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/sort/BubbleSort.java b/src/main/java/com/sort/BubbleSort.java[m
[1mnew file mode 100644[m
[1mindex 0000000..4555688[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/sort/BubbleSort.java[m
[36m@@ -0,0 +1,32 @@[m
[32m+[m[32mpackage com.sort;[m
[32m+[m
[32m+[m[32mpublic class BubbleSort {[m
[32m+[m
[32m+[m[32m    public static void bubbleSort(int[]nums){[m
[32m+[m
[32m+[m
[32m+[m[32m        for(int i = 0; i < nums.length; i++){[m
[32m+[m[32m            for(int j = 0; j < nums.length - i - 1; j++){[m
[32m+[m[32m                if(nums[j] > nums[j + 1]){[m
[32m+[m[32m                    swap(nums, j, j + 1);[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void swap(int[]nums, int index1, int index2){[m
[32m+[m[32m        nums[index1] = nums[index1] ^ nums[index2];[m
[32m+[m[32m        nums[index2] = nums[index2] ^ nums[index1];[m
[32m+[m[32m        nums[index1] = nums[index1] ^ nums[index2];[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        int[]nums = new int[]{2,6,1,9,2,1};[m
[32m+[m[32m        bubbleSort(nums);[m
[32m+[m[32m        for (int num : nums){[m
[32m+[m[32m            System.out.println(num);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/sort/BuildeHouse.java b/src/main/java/com/sort/BuildeHouse.java[m
[1mnew file mode 100644[m
[1mindex 0000000..d271b9b[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/sort/BuildeHouse.java[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m[32mpackage com.sort;[m
[32m+[m
[32m+[m[32mclass Solution {[m
[32m+[m[32m    long res = Long.MAX_VALUE;[m
[32m+[m[32m    public long GetMinCalculateCount(long sourceX, long sourceY, long targetX, long targetY) {[m
[32m+[m[32m        // write code here[m
[32m+[m[32m        dfs(sourceX, sourceY, targetX, targetY, 0);[m
[32m+[m[32m        return res;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void dfs(long x, long y, long tarX, long tarY, int time){[m
[32m+[m[32m        if(x > tarX || y > tarY)[m
[32m+[m[32m            return;[m
[32m+[m[32m        if(x == tarX || y == tarY){[m
[32m+[m[32m            if(x == tarX && y == tarY){[m
[32m+[m[32m                res = Math.min(res, time);[m
[32m+[m[32m            }[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        dfs(x + 1, y + 1, tarX, tarY,time + 1);[m
[32m+[m[32m        dfs(x * 2, y * 2, tarX, tarY, time + 1);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Solution b = new Solution();[m
[32m+[m
[32m+[m[32m        long res = b.GetMinCalculateCount(10,100,22,202);[m
[32m+[m[32m        System.out.println(res);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/sort/ChooseSort.java b/src/main/java/com/sort/ChooseSort.java[m
[1mnew file mode 100644[m
[1mindex 0000000..07d8294[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/sort/ChooseSort.java[m
[36m@@ -0,0 +1,39 @@[m
[32m+[m[32mpackage com.sort;[m
[32m+[m
[32m+[m[32mimport java.util.Arrays;[m
[32m+[m
[32m+[m[32mpublic class ChooseSort {[m
[32m+[m
[32m+[m[32m    public static void ChooseSort(int[]num) {[m
[32m+[m
[32m+[m[32m        for(int i = 0; i < num.length; i++){[m
[32m+[m[32m            int temp = num[i];[m
[32m+[m[32m            int index = i;[m
[32m+[m[32m            for(int j = i + 1; j < num.length; j++){[m
[32m+[m[32m                if(num[j] < temp){[m
[32m+[m[32m                    i = j;[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m            num[i] = num[index];[m
[32m+[m[32m            num[index] = temp;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        int[]num = new int[]{1,2,4,9};[m
[32m+[m
[32m+[m[32m        ChooseSort(num);[m
[32m+[m[32m        for(int n : num){[m
[32m+[m[32m            System.out.println(n);[m
[32m+[m[32m        }[m
[32m+[m[32m        System.out.println(num);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[1mdiff --git a/src/main/java/com/sort/MergeSort.java b/src/main/java/com/sort/MergeSort.java[m
[1mnew file mode 100644[m
[1mindex 0000000..21e5aed[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/sort/MergeSort.java[m
[36m@@ -0,0 +1,62 @@[m
[32m+[m[32mpackage com.sort;[m
[32m+[m
[32m+[m[32mpublic class MergeSort {[m
[32m+[m
[32m+[m[32m    public void mergeSort(int[]arr) {[m
[32m+[m[32m        int[]res = new int[arr.length];[m
[32m+[m[32m        mergeSort(arr, 0, arr.length - 1, res);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void mergeSort(int[]arr, int start, int end, int[]res) {[m
[32m+[m[32m        if(start == end)[m
[32m+[m[32m            return;[m
[32m+[m[32m        int middle = (end - start) / 2 + start;[m
[32m+[m
[32m+[m[32m        mergeSort(arr, start, middle, res);[m
[32m+[m[32m        mergeSort(arr, middle + 1, end, res);[m
[32m+[m[32m        merge(arr, start, end, res);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void merge(int[]arr, int start, int end, int[]res) {[m
[32m+[m[32m        int start1 = start;[m
[32m+[m[32m        int end1 = (end - start) / 2 + start;[m
[32m+[m[32m        int start2 = end1 + 1;[m
[32m+[m[32m        int end2 = end;[m
[32m+[m[32m        int index = start;[m
[32m+[m
[32m+[m[32m        while(start1 <= end1 && start2 <= end2){[m
[32m+[m[32m            if(arr[start1] <= arr[start2]){[m
[32m+[m[32m                res[index++] = arr[start1++];[m
[32m+[m[32m            }[m
[32m+[m[32m            else{[m
[32m+[m[32m                res[index++] = arr[start2++];[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        while(start1 <= end1){[m
[32m+[m[32m            res[index++] = arr[start1++];[m
[32m+[m[32m        }[m
[32m+[m[32m        while(start2 <= end2){[m
[32m+[m[32m            res[index++] = arr[start2++];[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        for(int i = start; i <= end; i++){[m
[32m+[m[32m            arr[i] = res[i];[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        MergeSort s = new MergeSort();[m
[32m+[m[32m        int[]res = new int[]{32,1,4,8,2,1,24,4};[m
[32m+[m[32m        s.mergeSort(res);[m
[32m+[m[32m        for(int num:res){[m
[32m+[m[32m            System.out.println(num);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/sort/QuickSort.java b/src/main/java/com/sort/QuickSort.java[m
[1mnew file mode 100644[m
[1mindex 0000000..a49ee23[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/sort/QuickSort.java[m
[36m@@ -0,0 +1,69 @@[m
[32m+[m[32mpackage com.sort;[m
[32m+[m
[32m+[m[32mpublic class QuickSort {[m
[32m+[m
[32m+[m[32m    public void quickSort(int[]arr){[m
[32m+[m[32m        quickSort(arr,0, arr.length - 1);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void quickSort(int[]arr, int left, int right){[m
[32m+[m[32m        if(left >= right)[m
[32m+[m[32m            return;[m
[32m+[m[32m        int middle = partition(arr, left, right);[m
[32m+[m
[32m+[m[32m        quickSort(arr, left, middle - 1);[m
[32m+[m[32m        quickSort(arr, middle + 1, right);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public int partition(int[]arr, int left, int right){[m
[32m+[m[32m        int start = left;[m
[32m+[m[32m        int pivot = arr[start];[m
[32m+[m[32m        left += 1;[m
[32m+[m[32m        while(left < right){[m
[32m+[m[32m            while(left < right && arr[left] <= pivot){[m
[32m+[m[32m                left++;[m
[32m+[m[32m            }[m
[32m+[m[32m            while(left < right && arr[right] >= pivot){[m
[32m+[m[32m                right--;[m
[32m+[m[32m            }[m
[32m+[m[32m            if(left < right){[m
[32m+[m[32m                swap(arr, left, right);[m
[32m+[m[32m                left++;[m
[32m+[m[32m                right--;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        if(left == right && arr[right] > pivot)[m
[32m+[m[32m            right--;[m
[32m+[m[32m        swap(arr, start, right);[m
[32m+[m[32m        return right;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void swap(int[]arr, int left, int right){[m
[32m+[m[32m        int temp = arr[left];[m
[32m+[m[32m        arr[left] = arr[right];[m
[32m+[m[32m        arr[right] = temp;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m[32mclass MainSolution{[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        QuickSort s = new QuickSort();[m
[32m+[m[32m        int[]nums = new int[]{1,2,78,1,2,4,2,1,64};[m
[32m+[m[32m        s.quickSort(nums);[m
[32m+[m[32m        for (int num : nums){[m
[32m+[m[32m            System.out.println(num);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[1mdiff --git a/src/main/java/com/sort/minHeap.java b/src/main/java/com/sort/minHeap.java[m
[1mnew file mode 100644[m
[1mindex 0000000..8518954[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/sort/minHeap.java[m
[36m@@ -0,0 +1,61 @@[m
[32m+[m[32mpackage com.sort;[m
[32m+[m
[32m+[m[32mimport jvm.Solution;[m
[32m+[m
[32m+[m[32mpublic class minHeap {[m
[32m+[m
[32m+[m
[32m+[m[32m        public void heapSort(int[]arr){[m
[32m+[m[32m            buildHeap(arr);[m
[32m+[m[32m            for(int i = arr.length - 1; i >= 0; i--){[m
[32m+[m[32m                swap(arr, 0, i);[m
[32m+[m[32m                heapify(arr, 0, i);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void buildHeap(int[]arr){[m
[32m+[m[32m            for(int i = arr.length / 2 - 1; i >= 0; i--){[m
[32m+[m[32m                heapify(arr, i, arr.length);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void heapify(int[]arr, int i, int length){[m
[32m+[m[32m            int left = 2 * i + 1;[m
[32m+[m[32m            int right = left + 1;[m
[32m+[m[32m            int largest = i;[m
[32m+[m
[32m+[m[32m            if(left < length && arr[left] > arr[largest]){[m
[32m+[m[32m                largest = left;[m
[32m+[m[32m            }[m
[32m+[m[32m            if(right < length && arr[right] > arr[largest]){[m
[32m+[m[32m                largest = right;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            if(largest != i){[m
[32m+[m[32m                swap(arr,i, largest);[m
[32m+[m[32m                heapify(arr, largest, length);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m        public void swap(int[]nums, int a, int b){[m
[32m+[m[32m            int temp = nums[a];[m
[32m+[m[32m            nums[a] = nums[b];[m
[32m+[m[32m            nums[b] = temp;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32mclass Main{[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        minHeap m = new minHeap();[m
[32m+[m[32m        int[]nums = new int[]{1,23,5,2,1,6,43,2};[m
[32m+[m[32m        m.heapSort(nums);[m
[32m+[m[32m        for(int num : nums){[m
[32m+[m[32m            System.out.println(num);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/synchronzed.java b/src/main/java/com/synchronzed.java[m
[1mnew file mode 100644[m
[1mindex 0000000..cc78ee0[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/synchronzed.java[m
[36m@@ -0,0 +1,69 @@[m
[32m+[m[32mpackage com;[m
[32m+[m
[32m+[m[32mpublic class synchronzed {[m
[32m+[m
[32m+[m[32m    private Object obj;[m
[32m+[m[32m    boolean flagA = false;[m
[32m+[m
[32m+[m[32m    public synchronzed(){[m
[32m+[m[32m        obj = new Object();[m
[32m+[m[32m    }[m
[32m+[m[32m    public void printA() throws InterruptedException {[m
[32m+[m
[32m+[m[32m        for(int i = 0; i < 10; i++){[m
[32m+[m[32m            synchronized (obj){[m
[32m+[m[32m                if(flagA){[m
[32m+[m[32m                    obj.wait();[m
[32m+[m[32m                }[m
[32m+[m[32m                System.out.println("A");[m
[32m+[m[32m                flagA = true;[m
[32m+[m[32m                obj.notify();[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void printB() throws InterruptedException {[m
[32m+[m[32m        for(int i = 0; i < 10; i++){[m
[32m+[m[32m            synchronized (obj){[m
[32m+[m[32m                if(!flagA){[m
[32m+[m[32m                    obj.wait();[m
[32m+[m[32m                }[m
[32m+[m[32m                System.out.println("B");[m
[32m+[m[32m                flagA = false;[m
[32m+[m[32m                obj.notify();[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        synchronzed s = new synchronzed();[m
[32m+[m
[32m+[m[32m        new Thread(){[m
[32m+[m[32m            public void run(){[m
[32m+[m[32m                try {[m
[32m+[m[32m                    s.printB();[m
[32m+[m[32m                } catch (InterruptedException e) {[m
[32m+[m[32m                    e.printStackTrace();[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }.start();[m
[32m+[m
[32m+[m[32m        new Thread(){[m
[32m+[m[32m            public void run(){[m
[32m+[m[32m                try {[m
[32m+[m[32m                    s.printA();[m
[32m+[m[32m                } catch (InterruptedException e) {[m
[32m+[m[32m                    e.printStackTrace();[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }.start();[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/tree.java b/src/main/java/com/tree.java[m
[1mnew file mode 100644[m
[1mindex 0000000..cdfd9ed[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/tree.java[m
[36m@@ -0,0 +1,46 @@[m
[32m+[m[32mpackage com;[m
[32m+[m
[32m+[m[32mpublic class tree {[m
[32m+[m
[32m+[m[32m    static class TreeNode{[m
[32m+[m[32m        int val;[m
[32m+[m[32m        TreeNode left;[m
[32m+[m[32m        TreeNode right;[m
[32m+[m
[32m+[m[32m        public TreeNode(int val){[m
[32m+[m[32m            this.val = val;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static int sum = 0;[m
[32m+[m[32m    public static int findSum(TreeNode root){[m
[32m+[m[32m        dfs(root, null);[m
[32m+[m[32m        return sum;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void dfs(TreeNode root,TreeNode prev){[m
[32m+[m[32m        if(root == null )[m
[32m+[m[32m            return;[m
[32m+[m
[32m+[m[32m        if(root.left == null && root.right == null){[m
[32m+[m[32m            if(prev != null && prev.right == null)[m
[32m+[m[32m                sum += root.val;[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        dfs(root.left, root);[m
[32m+[m[32m        dfs(root.right, root);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        TreeNode head = new TreeNode(1);[m
[32m+[m[32m        head.left = new TreeNode(2);[m
[32m+[m[32m        head.right = new TreeNode(3);[m
[32m+[m[32m        head.left.left = new TreeNode(4);[m
[32m+[m
[32m+[m[32m        head.right.right = new TreeNode(6);[m
[32m+[m
[32m+[m[32m        findSum(head);[m
[32m+[m[32m        System.out.println(sum);[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/wang/BlockingQ2.java b/src/main/java/com/wang/BlockingQ2.java[m
[1mnew file mode 100644[m
[1mindex 0000000..34acebd[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/wang/BlockingQ2.java[m
[36m@@ -0,0 +1,81 @@[m
[32m+[m[32mpackage com.wang;[m
[32m+[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m[32mimport java.util.Deque;[m
[32m+[m[32mimport java.util.LinkedList;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32mpublic class BlockingQ2 {[m
[32m+[m
[32m+[m[32m    private Deque<Integer> queue;[m
[32m+[m[32m    private int maxCount;[m
[32m+[m[32m    public List<Integer> list;[m
[32m+[m[32m    public BlockingQ2(int maxCount){[m
[32m+[m[32m        this.queue = new LinkedList<>();[m
[32m+[m[32m        this.maxCount = maxCount;[m
[32m+[m[32m        list = new ArrayList<>();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void put() throws Exception {[m
[32m+[m[32m        for(int i = 0; i < 10; i++){[m
[32m+[m[32m            synchronized (queue){[m
[32m+[m[32m                if(queue.size() == maxCount){[m
[32m+[m[32m                    queue.wait();[m
[32m+[m[32m                    System.out.println("队列已满");[m
[32m+[m[32m                }[m
[32m+[m[32m                queue.offer(i);[m
[32m+[m[32m                queue.notifyAll();[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void get() throws Exception{[m
[32m+[m[32m        for(int i = 0; i < 10; i++){[m
[32m+[m[32m            synchronized (queue){[m
[32m+[m[32m                if(queue.size() == 0){[m
[32m+[m[32m                    queue.wait();[m
[32m+[m[32m                    System.out.println("请等待");[m
[32m+[m[32m                }[m
[32m+[m[32m                int j = queue.poll();[m
[32m+[m[32m                list.add(j);[m
[32m+[m[32m                System.out.println(j);[m
[32m+[m[32m                queue.notifyAll();[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void print(){[m
[32m+[m[32m        for(int i = 0; i < list.size(); i++){[m
[32m+[m[32m            System.out.println(list.get(i));[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        BlockingQ2 blockingQ2 = new BlockingQ2(2);[m
[32m+[m[32m        new Thread(){[m
[32m+[m[32m            public void run() {[m
[32m+[m[32m                try {[m
[32m+[m[32m                    blockingQ2.get();[m
[32m+[m[32m                } catch (Exception e) {[m
[32m+[m[32m                    e.printStackTrace();[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }.start();[m
[32m+[m
[32m+[m[32m        new Thread(){[m
[32m+[m[32m            public void run(){[m
[32m+[m[32m                try{[m
[32m+[m[32m                    blockingQ2.put();[m
[32m+[m[32m                }[m
[32m+[m[32m                catch (Exception e){[m
[32m+[m[32m                    e.printStackTrace();[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }.start();[m
[32m+[m
[32m+[m[32m        blockingQ2.print();[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/wang/BlockingQueue.java b/src/main/java/com/wang/BlockingQueue.java[m
[1mnew file mode 100644[m
[1mindex 0000000..52362c8[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/wang/BlockingQueue.java[m
[36m@@ -0,0 +1,73 @@[m
[32m+[m[32mpackage com.wang;[m
[32m+[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class BlockingQueue {[m
[32m+[m[32m    private int maxCount;[m
[32m+[m[32m    private Deque<Integer>blockingQueue;[m
[32m+[m
[32m+[m[32m    public BlockingQueue(int size){[m
[32m+[m[32m            blockingQueue = new LinkedList<>();[m
[32m+[m[32m            this.maxCount = size;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void put(int m) throws Exception {[m
[32m+[m[32m            synchronized (blockingQueue) {[m
[32m+[m[32m                while (blockingQueue.size() == maxCount) {[m
[32m+[m[32m                    System.out.println("消息队列已满，请等待");[m
[32m+[m[32m                    blockingQueue.wait();[m
[32m+[m[32m                }[m
[32m+[m[32m                blockingQueue.offer(m);[m
[32m+[m[32m                blockingQueue.notifyAll();[m
[32m+[m[32m            }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public int get() throws Exception {[m
[32m+[m[32m            synchronized (blockingQueue) {[m
[32m+[m[32m                while (blockingQueue.size() == 0) {[m
[32m+[m[32m                    System.out.println("请等待");[m
[32m+[m[32m                    blockingQueue.wait();[m
[32m+[m[32m                }[m
[32m+[m[32m                int res = blockingQueue.pollFirst();[m
[32m+[m[32m                blockingQueue.notifyAll();[m
[32m+[m[32m                return res;[m
[32m+[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        BlockingQueue queue = new BlockingQueue(10);[m
[32m+[m[32m        List<Integer>list = new ArrayList<>();[m
[32m+[m[32m        new Thread("h1"){[m
[32m+[m[32m            public void run(){[m
[32m+[m[32m                while(true)[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        System.out.println(queue.get());[m
[32m+[m[32m                    } catch (Exception e) {[m
[32m+[m[32m                        e.printStackTrace();[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m[32m        }.start();[m
[32m+[m
[32m+[m[32m        new Thread(){[m
[32m+[m[32m            public void run(){[m
[32m+[m[32m                for(int i = 0; i < 100; i++){[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        queue.put(i);[m
[32m+[m[32m                    } catch (Exception e) {[m
[32m+[m[32m                        e.printStackTrace();[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }.start();[m
[32m+[m
[32m+[m[32m        for(int i = 0; i < list.size(); i++){[m
[32m+[m[32m            System.out.println(i);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/wang/BuildeMyTree.java b/src/main/java/com/wang/BuildeMyTree.java[m
[1mnew file mode 100644[m
[1mindex 0000000..b7c73dd[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/wang/BuildeMyTree.java[m
[36m@@ -0,0 +1,139 @@[m
[32m+[m[32mpackage com.wang;[m
[32m+[m
[32m+[m[32mimport com.sun.source.tree.Tree;[m
[32m+[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class BuildeMyTree {[m
[32m+[m
[32m+[m
[32m+[m[32m    public TreeNode buildeMyTree(String[] s) {[m
[32m+[m[32m        int index = 1;[m
[32m+[m[32m        int n = 0;[m
[32m+[m[32m        Deque<TreeNode> queue = new LinkedList<>();[m
[32m+[m[32m        int headVal = Integer.parseInt(s[0]);[m
[32m+[m[32m        TreeNode head = new TreeNode(headVal);[m
[32m+[m
[32m+[m[32m        queue.offer(head);[m
[32m+[m
[32m+[m[32m        while (!queue.isEmpty() && index < s.length) {[m
[32m+[m
[32m+[m[32m            int size = queue.size();[m
[32m+[m[32m            for (int i = 0; i < size; i++) {[m
[32m+[m[32m                TreeNode temp = queue.poll();[m
[32m+[m
[32m+[m[32m                if (s[index].equals("null")) {[m
[32m+[m[32m                    temp.left = null;[m
[32m+[m[32m                } else {[m
[32m+[m[32m                    int leftVal = Integer.parseInt(s[index]);[m
[32m+[m[32m                    TreeNode left = new TreeNode(leftVal);[m
[32m+[m[32m                    temp.left = left;[m
[32m+[m[32m                    queue.offer(left);[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                index++;[m
[32m+[m[32m                if (s[index].equals("null")) {[m
[32m+[m[32m                    temp.right = null;[m
[32m+[m[32m                } else {[m
[32m+[m[32m                    int rightVal = Integer.parseInt(s[index]);[m
[32m+[m[32m                    TreeNode right = new TreeNode(rightVal);[m
[32m+[m[32m                    temp.right = right;[m
[32m+[m[32m                    queue.offer(right);[m
[32m+[m[32m                }[m
[32m+[m[32m                index++;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        return head;[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void bfs(TreeNode root) {[m
[32m+[m
[32m+[m[32m        Stack<TreeNode> stack = new Stack<>();[m
[32m+[m[32m        TreeNode prev = null;[m
[32m+[m[32m        List<Integer> list = new ArrayList<>();[m
[32m+[m
[32m+[m[32m        while (root != null || !stack.isEmpty()) {[m
[32m+[m[32m            while(root != null) {[m
[32m+[m
[32m+[m[32m                stack.push(root);[m
[32m+[m[32m                root = root.left;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            root = stack.pop();[m
[32m+[m[32m            if (root.right == null || root.right == prev) {[m
[32m+[m[32m                list.add(root.val);[m
[32m+[m[32m                prev = root;[m
[32m+[m[32m                root = null;[m
[32m+[m[32m            } else {[m
[32m+[m[32m                stack.push(root);[m
[32m+[m[32m                root = root.right;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        for (int i = 0; i < list.size(); i++) {[m
[32m+[m[32m            System.out.print(list.get(i) + " , ");[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public String deCode(TreeNode root){[m
[32m+[m[32m        StringBuilder sb = new StringBuilder();[m
[32m+[m[32m        Deque<TreeNode>queue = new LinkedList<>();[m
[32m+[m[32m        TreeNode dummy = new TreeNode(-1);[m
[32m+[m[32m        queue.offer(root);[m
[32m+[m[32m        while(!queue.isEmpty()){[m
[32m+[m[32m            int size = queue.size();[m
[32m+[m[32m            for(int i = 0; i < size; i++){[m
[32m+[m
[32m+[m[32m                TreeNode temp = queue.poll();[m
[32m+[m[32m                if(temp == dummy){[m
[32m+[m[32m                    sb.append("null,");[m
[32m+[m[32m                    continue;[m
[32m+[m[32m                }[m
[32m+[m[32m                sb.append(temp.val + ",");[m
[32m+[m[32m                if(temp.left == null && temp.right == null)[m
[32m+[m[32m                        continue;[m
[32m+[m[32m                if(temp.left == null){[m
[32m+[m[32m                    queue.offer(dummy);[m
[32m+[m[32m                }[m
[32m+[m[32m                else{[m
[32m+[m[32m                    queue.offer(temp.left);[m
[32m+[m[32m                }[m
[32m+[m[32m                if(temp.right == null){[m
[32m+[m[32m                    queue.offer(dummy);[m
[32m+[m
[32m+[m[32m                }else {[m
[32m+[m[32m                    queue.offer(temp.right);[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        sb.deleteCharAt(sb.length() - 1);[m
[32m+[m[32m        return sb.toString();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        BuildeMyTree buildeMyTree = new BuildeMyTree();[m
[32m+[m[32m        String[]s = new String[]{"1", "2", "8", "null", "3", "10", "null", "6", "7", "11","13"};[m
[32m+[m[32m        TreeNode head = buildeMyTree.buildeMyTree(s);[m
[32m+[m[32m        buildeMyTree.bfs(head);[m
[32m+[m[32m        System.out.println(buildeMyTree.deCode(head));[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mclass TreeNode{[m
[32m+[m[32m    int val;[m
[32m+[m[32m    TreeNode left;[m
[32m+[m[32m    TreeNode right;[m
[32m+[m
[32m+[m[32m    public TreeNode(int val){[m
[32m+[m[32m        this.val = val;[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/wang/BuilderMyTree2.java b/src/main/java/com/wang/BuilderMyTree2.java[m
[1mnew file mode 100644[m
[1mindex 0000000..e711cc8[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/wang/BuilderMyTree2.java[m
[36m@@ -0,0 +1,77 @@[m
[32m+[m[32mpackage com.wang;[m
[32m+[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m[32mimport java.util.Stack;[m
[32m+[m
[32m+[m[32mpublic class BuilderMyTree2 {[m
[32m+[m[32m    int index;[m
[32m+[m[32m    public String enCode(TreeNode root){[m
[32m+[m[32m        StringBuilder sb = new StringBuilder();[m
[32m+[m[32m        enCodeDfs(root, sb);[m
[32m+[m[32m        sb.deleteCharAt(sb.length() - 1);[m
[32m+[m[32m        return sb.toString();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public TreeNode deCode(String s){[m
[32m+[m[32m        String[]array = s.split("\\,");[m
[32m+[m[32m        return dfs(array);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public TreeNode dfs(String[]array){[m
[32m+[m[32m        if(array[index].equals("null"))[m
[32m+[m[32m            return null;[m
[32m+[m
[32m+[m[32m        TreeNode head = new TreeNode(Integer.parseInt(array[index]));[m
[32m+[m[32m        index++;[m
[32m+[m[32m        head.left = dfs(array);[m
[32m+[m[32m        index++;[m
[32m+[m[32m        head.right = dfs(array);[m
[32m+[m[32m        return head;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void enCodeDfs(TreeNode root, StringBuilder sb){[m
[32m+[m[32m        if(root == null){[m
[32m+[m[32m            sb.append("null,");[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m[32m        sb.append(root.val + ",");[m
[32m+[m[32m        enCodeDfs(root.left, sb);[m
[32m+[m[32m        enCodeDfs(root.right,sb);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void bfs(TreeNode root){[m
[32m+[m[32m        List<Integer> list = new ArrayList<>();[m
[32m+[m[32m        Stack<TreeNode>stack = new Stack<>();[m
[32m+[m[32m        while(root != null || !stack.isEmpty()){[m
[32m+[m[32m            while(root != null){[m
[32m+[m[32m                stack.push(root);[m
[32m+[m[32m                root = root.left;[m
[32m+[m[32m            }[m
[32m+[m[32m            root = stack.pop();[m
[32m+[m[32m            list.add(root.val);[m
[32m+[m[32m            root = root.right;[m
[32m+[m[32m        }[m
[32m+[m[32m        for (int i = 0; i < list.size(); i++) {[m
[32m+[m[32m            System.out.print(list.get(i) + ",");[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        BuilderMyTree2 builderMyTree = new BuilderMyTree2();[m
[32m+[m[32m        String s = "1,2,null,3,6,null,null,7,null,null,8,10,11,null,null,13,null,null,null";[m
[32m+[m[32m        TreeNode root = builderMyTree.deCode(s);[m
[32m+[m[32m        String rs = builderMyTree.enCode(root);[m
[32m+[m[32m        System.out.println(rs);[m
[32m+[m[32m        System.out.println();[m
[32m+[m[32m        builderMyTree.bfs(root);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[1mdiff --git a/src/main/java/com/wang/Building.java b/src/main/java/com/wang/Building.java[m
[1mnew file mode 100644[m
[1mindex 0000000..347cfb5[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/wang/Building.java[m
[36m@@ -0,0 +1,47 @@[m
[32m+[m[32mpackage com.wang;[m
[32m+[m
[32m+[m[32mimport java.util.Stack;[m
[32m+[m
[32m+[m[32mpublic class Building {[m
[32m+[m
[32m+[m[32m    public static int[] findBuilding(int[]build){[m
[32m+[m[32m        Stack<Integer>stack = new Stack<>();[m
[32m+[m[32m        int[]res = new int[build.length];[m
[32m+[m
[32m+[m[32m        for(int i = 0; i < build.length; i++){[m
[32m+[m[32m            res[i] = stack.size() + 1;[m
[32m+[m[32m            if(stack.isEmpty() || stack.peek() > build[i]){[m
[32m+[m[32m                stack.push(build[i]);[m
[32m+[m[32m            }else{[m
[32m+[m[32m                while(!stack.isEmpty() && stack.peek() <= build[i]){[m
[32m+[m[32m                    stack.pop();[m
[32m+[m[32m                }[m
[32m+[m[32m                stack.push(build[i]);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m        stack = new Stack<>();[m
[32m+[m[32m        for(int i = build.length-1; i >= 0 ; i--){[m
[32m+[m[32m            res[i] += stack.size();[m
[32m+[m[32m            if(stack.isEmpty() || stack.peek() > build[i]){[m
[32m+[m[32m                stack.push(build[i]);[m
[32m+[m[32m            }else{[m
[32m+[m[32m                while(!stack.isEmpty() && stack.peek() <= build[i]){[m
[32m+[m[32m                    stack.pop();[m
[32m+[m[32m                }[m
[32m+[m[32m                stack.push(build[i]);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m        return res;[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        int[]res = findBuilding(new int[]{5,3,8,3,2,5});[m
[32m+[m[32m        for (int n : res){[m
[32m+[m[32m            System.out.println(n);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/wang/HashMap.java b/src/main/java/com/wang/HashMap.java[m
[1mnew file mode 100644[m
[1mindex 0000000..dad3e76[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/wang/HashMap.java[m
[36m@@ -0,0 +1,91 @@[m
[32m+[m[32mpackage com.wang;[m
[32m+[m
[32m+[m[32mpublic class HashMap {[m
[32m+[m[32m    static class Entry<K,V>{[m
[32m+[m[32m        K key;[m
[32m+[m[32m        V value;[m
[32m+[m[32m        Entry<K,V>next;[m
[32m+[m
[32m+[m[32m        public Entry(K key, V value, Entry<K,V>next){[m
[32m+[m[32m            this.key = key;[m
[32m+[m[32m            this.value = value;[m
[32m+[m[32m            this.next = next;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    static class hashMap<K,V>{[m
[32m+[m[32m        private static final int DEFAULT_SIZE = 16;[m
[32m+[m[32m        private static final double DEFAULT_LOAD_FACTOR = 0.75;[m
[32m+[m[32m        private double loadFactor;[m
[32m+[m[32m        private int initCapacity;[m
[32m+[m
[32m+[m[32m        private Entry<K,V>[]table = null;[m
[32m+[m
[32m+[m[32m        public hashMap(){[m
[32m+[m[32m            this.loadFactor = DEFAULT_LOAD_FACTOR;[m
[32m+[m[32m            this.initCapacity = DEFAULT_SIZE;[m
[32m+[m[32m            table = new Entry[this.initCapacity];[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public int hash(K key){[m
[32m+[m[32m            if(key == null)[m
[32m+[m[32m                return 0;[m
[32m+[m[32m            int h = key.hashCode();[m
[32m+[m[32m            return h ^ h>>>16;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public void put(K key, V value){[m
[32m+[m[32m            int index = hash(key) % (initCapacity - 1);[m
[32m+[m[32m            if(table[index] != null){[m
[32m+[m[32m                Entry<K,V>e = table[index];[m
[32m+[m[32m                Entry<K,V>e2 = null;[m
[32m+[m[32m                while(e != null){[m
[32m+[m[32m                    if(hash(e.key) == hash(key) && e.key.equals(key)){[m
[32m+[m[32m                        e.value = value;[m
[32m+[m[32m                        break;[m
[32m+[m[32m                    }[m
[32m+[m[32m                    e2 = e;[m
[32m+[m[32m                    e = e.next;[m
[32m+[m[32m                }[m
[32m+[m[32m                if(e == null){[m
[32m+[m[32m                    e2.next = new Entry<K,V>(key,value,null);[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m[32m            else{[m
[32m+[m[32m                table[index] = new Entry<K,V>(key,value,null);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public V get(K key){[m
[32m+[m[32m            int index = hash(key) % (initCapacity - 1);[m
[32m+[m[32m            if(table[index] == null)[m
[32m+[m[32m                return null;[m
[32m+[m
[32m+[m[32m            Entry<K,V>temp = table[index];[m
[32m+[m
[32m+[m[32m            while(temp != null){[m
[32m+[m[32m                if(hash(temp.key) == hash(key) && temp.key.equals(key)){[m
[32m+[m[32m                    return temp.value;[m
[32m+[m[32m                }[m
[32m+[m[32m                temp = temp.next;[m
[32m+[m[32m            }[m
[32m+[m[32m            return null;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public static void main(String[] args) {[m
[32m+[m[32m            HashMap.hashMap<String,Integer>map = new HashMap.hashMap<String,Integer>();[m
[32m+[m[32m            map.put("wang", 1);[m
[32m+[m[32m            map.put("tao", 2);[m
[32m+[m[32m            map.put("han", 3);[m
[32m+[m
[32m+[m[32m            System.out.println(map.get("wang"));[m
[32m+[m[32m            System.out.println(map.get("tao"));[m
[32m+[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/wang/JVM.class b/src/main/java/com/wang/JVM.class[m
[1mnew file mode 100644[m
[1mindex 0000000..846c776[m
Binary files /dev/null and b/src/main/java/com/wang/JVM.class differ
[1mdiff --git a/src/main/java/com/wang/JVM.java b/src/main/java/com/wang/JVM.java[m
[1mnew file mode 100644[m
[1mindex 0000000..c268904[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/wang/JVM.java[m
[36m@@ -0,0 +1,12 @@[m
[32m+[m[32mpackage com.wang;[m
[32m+[m
[32m+[m[32mpublic class JVM {[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        String s1 = "ab";[m
[32m+[m[32m        String s2 = new String("a") + new String("b");[m
[32m+[m[32m        String intern = s2.intern();[m
[32m+[m[32m        System.out.println(intern == s2);[m
[32m+[m[32m        System.out.println(intern == s1);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/wang/Random01.java b/src/main/java/com/wang/Random01.java[m
[1mnew file mode 100644[m
[1mindex 0000000..23f3ce5[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/wang/Random01.java[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32mpackage com.wang;[m
[32m+[m
[32m+[m[32mimport java.util.Random;[m
[32m+[m
[32m+[m[32mpublic class Random01 {[m
[32m+[m[32m    public static int random(int p){[m
[32m+[m[32m        Random random = new Random();[m
[32m+[m[32m        int res = random.nextInt(10);[m
[32m+[m
[32m+[m[32m        if(res < p)[m
[32m+[m[32m            return 0;[m
[32m+[m[32m        return 1;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public static int myRandom(int p){[m
[32m+[m
[32m+[m[32m        int size0 = p;[m
[32m+[m[32m        int size1 = 10 - p;[m
[32m+[m
[32m+[m[32m        while(true){[m
[32m+[m[32m            int temp = random(p);[m
[32m+[m[32m            if(temp == 0)[m
[32m+[m[32m                size0--;[m
[32m+[m[32m            if(temp == 1)[m
[32m+[m[32m                size1--;[m
[32m+[m
[32m+[m[32m            if(size0 == 0)[m
[32m+[m[32m                return 0;[m
[32m+[m[32m            if(size1 == 0)[m
[32m+[m[32m                return 1;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        int time1 = 0;[m
[32m+[m[32m        for(int i = 0; i < 10; i++){[m
[32m+[m[32m            int temp = myRandom(7);[m
[32m+[m[32m            if(temp == 1)[m
[32m+[m[32m                time1++;[m
[32m+[m[32m        }[m
[32m+[m[32m        System.out.println(time1);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/wang/Solution5.java b/src/main/java/com/wang/Solution5.java[m
[1mnew file mode 100644[m
[1mindex 0000000..110b487[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/wang/Solution5.java[m
[36m@@ -0,0 +1,45 @@[m
[32m+[m[32mpackage com.wang;[m
[32m+[m
[32m+[m[32mimport java.util.Comparator;[m
[32m+[m[32mimport java.util.HashSet;[m
[32m+[m[32mimport java.util.PriorityQueue;[m
[32m+[m[32mimport java.util.Set;[m
[32m+[m
[32m+[m[32mpublic class Solution5 {[m
[32m+[m[32m    public static String removeChar(String s, int k){[m
[32m+[m[32m        PriorityQueue<int[]>queue = new PriorityQueue<>(new Comparator<int[]>() {[m
[32m+[m[32m            @Override[m
[32m+[m[32m            public int compare(int[] o1, int[] o2) {[m
[32m+[m[32m                return o1[0] == o2[0]? o1[1] - o2[1]:o1[0] - o2[0];[m
[32m+[m[32m            }[m
[32m+[m[32m        });[m
[32m+[m[32m        StringBuilder sb = new StringBuilder();[m
[32m+[m[32m        for(int i = 0; i < s.length(); i++){[m
[32m+[m[32m            int[]temp = new int[2];[m
[32m+[m[32m            temp[0] = s.charAt(i);[m
[32m+[m[32m            temp[1] = i;[m
[32m+[m[32m            queue.offer(temp);[m
[32m+[m[32m        }[m
[32m+[m[32m        Set<Integer> set = new HashSet<>();[m
[32m+[m[32m        while(k > 0){[m
[32m+[m[32m            int[]temp = queue.poll();[m
[32m+[m[32m            set.add(temp[1]);[m
[32m+[m[32m            k--;[m
[32m+[m[32m        }[m
[32m+[m[32m        for(int i = 0; i < s.length(); i++){[m
[32m+[m[32m            if(!set.contains(i))[m
[32m+[m[32m                sb.append(s.charAt(i));[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m        return sb.toString();[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        String s = "abcdbb";[m
[32m+[m[32m        int k = 2;[m
[32m+[m[32m        String res = removeChar(s,k);[m
[32m+[m[32m        System.out.println(res);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/wang/Solution_3.java b/src/main/java/com/wang/Solution_3.java[m
[1mnew file mode 100644[m
[1mindex 0000000..5da3701[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/wang/Solution_3.java[m
[36m@@ -0,0 +1,47 @@[m
[32m+[m[32mpackage com.wang;[m
[32m+[m
[32m+[m[32mimport java.util.Deque;[m
[32m+[m[32mimport java.util.LinkedList;[m
[32m+[m[32mimport java.util.Stack;[m
[32m+[m
[32m+[m[32mpublic class Solution_3 {[m
[32m+[m[32m    static Deque<Integer> normalStack;[m
[32m+[m[32m    static Deque<Integer> stack;[m
[32m+[m
[32m+[m[32m    public Solution_3(){[m
[32m+[m[32m        normalStack = new LinkedList<Integer>();[m
[32m+[m[32m        stack = new LinkedList<Integer>();[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void appendTail(int num){[m
[32m+[m[32m        normalStack.push(num);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static int deleteHead(){[m
[32m+[m[32m        if(normalStack.isEmpty()){[m
[32m+[m[32m            if(stack.isEmpty())[m
[32m+[m[32m                    return -1;[m
[32m+[m[32m            return stack.pop();[m
[32m+[m[32m        }[m
[32m+[m[32m        else {[m
[32m+[m[32m            while(!normalStack.isEmpty()){[m
[32m+[m[32m                stack.push(normalStack.pop());[m
[32m+[m[32m            }[m
[32m+[m[32m            return stack.pop();[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        new Solution_3();[m
[32m+[m[32m        System.out.println(deleteHead());[m
[32m+[m[32m        appendTail(5);[m
[32m+[m[32m        appendTail(2);[m
[32m+[m
[32m+[m[32m        System.out.println(deleteHead());[m
[32m+[m[32m        System.out.println(deleteHead());[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/com/wang/solution_4.java b/src/main/java/com/wang/solution_4.java[m
[1mnew file mode 100644[m
[1mindex 0000000..e363567[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/com/wang/solution_4.java[m
[36m@@ -0,0 +1,48 @@[m
[32m+[m[32mpackage com.wang;[m
[32m+[m
[32m+[m[32mpublic class solution_4 {[m
[32m+[m[32m    char[]loop = new char[]{'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};[m
[32m+[m[32m    char[]num;[m
[32m+[m[32m    StringBuffer sb;[m
[32m+[m[32m    int n;[m
[32m+[m[32m    int start;[m
[32m+[m[32m    int nine;[m
[32m+[m[32m    public String[] integerList(int n){[m
[32m+[m[32m        num = new char[n];[m
[32m+[m[32m        sb = new StringBuffer();[m
[32m+[m[32m        this.n = n;[m
[32m+[m[32m        start = n - 1;[m
[32m+[m[32m        nine = 0;[m
[32m+[m[32m        dfs(0);[m
[32m+[m[32m        sb.deleteCharAt(sb.length() - 1);[m
[32m+[m[32m        String[]res = sb.toString().split(",");[m
[32m+[m[32m        return res;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void dfs(int x){[m
[32m+[m[32m        if(x == n){[m
[32m+[m[32m            String temp = String.valueOf(num).substring(start);[m
[32m+[m[32m            if(!temp.equals("0"))[m
[32m+[m[32m                sb.append(temp + ",");[m
[32m+[m[32m            if(nine + start == n)[m
[32m+[m[32m                start--;[m
[32m+[m[32m            return;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        for(char c:loop){[m
[32m+[m[32m            if(c == '9')[m
[32m+[m[32m                nine++;[m
[32m+[m[32m            num[x] = c;[m
[32m+[m[32m            dfs(x + 1);[m
[32m+[m[32m        }[m
[32m+[m[32m        nine--;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        solution_4 s = new solution_4();[m
[32m+[m[32m        String[] strings = s.integerList(8);[m
[32m+[m[32m        for(String s1 : strings)[m
[32m+[m[32m            System.out.println(s1);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/headSort.java b/src/main/java/headSort.java[m
[1mnew file mode 100644[m
[1mindex 0000000..122b38e[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/headSort.java[m
[36m@@ -0,0 +1,41 @@[m
[32m+[m[32mpublic class headSort {[m
[32m+[m[32m    public void headSort(int[] arr){[m
[32m+[m[32m        buildMaxHeap(arr);[m
[32m+[m
[32m+[m[32m        for(int i = arr.length - 1; i > 0 ; i --){[m
[32m+[m[32m            swap(arr, 0 , i);[m
[32m+[m[32m            MaxHeap(arr, 0, i);                         //对剩下的继续进行排序；[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void buildMaxHeap(int[] arr){[m
[32m+[m[32m        for(int i =  arr.length /2 - 1 ; i >=0 ; i--){[m
[32m+[m[32m            MaxHeap(arr, i, arr.length);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void MaxHeap(int[] arr, int i, int size) {    //对三个点进行排序[m
[32m+[m[32m        int l = 2* i + 1;[m
[32m+[m[32m        int r = l + 1;[m
[32m+[m[32m        int largest = i;[m
[32m+[m
[32m+[m[32m        if(l < size && arr[l] > arr[largest]) largest = l;[m
[32m+[m[32m        if(r < size && arr[r] > arr[largest]) largest = r;[m
[32m+[m
[32m+[m[32m        if(largest != i){[m
[32m+[m[32m            swap(arr, largest, i);[m
[32m+[m[32m            MaxHeap(arr, largest, size);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void swap(int[] arr, int x, int y){[m
[32m+[m[32m        x = x ^ y;[m
[32m+[m[32m        y=x ^ y ;[m
[32m+[m[32m        x=x ^ y;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/jvm/GC.java b/src/main/java/jvm/GC.java[m
[1mnew file mode 100644[m
[1mindex 0000000..871efc1[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/jvm/GC.java[m
[36m@@ -0,0 +1,14 @@[m
[32m+[m[32mpackage jvm;[m
[32m+[m
[32m+[m[32mpublic class GC {[m
[32m+[m[32m    public static final int _1MB = 1024 * 1024;[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        byte[] allocation1, allocation2, allocation3, allocation4;[m
[32m+[m
[32m+[m[32m        allocation1 = new byte[2 * _1MB];[m
[32m+[m[32m        allocation2 = new byte[2 * _1MB];[m
[32m+[m[32m        allocation3 = new byte[2 * _1MB];[m
[32m+[m[32m        allocation4 = new byte[4 * _1MB];[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/jvm/JHSDB_TestCase.java b/src/main/java/jvm/JHSDB_TestCase.java[m
[1mnew file mode 100644[m
[1mindex 0000000..5581c91[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/jvm/JHSDB_TestCase.java[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32mpackage jvm;[m
[32m+[m[32mimport java.lang.Object;[m
[32m+[m
[32m+[m[32mpublic class JHSDB_TestCase {[m
[32m+[m
[32m+[m[32m    static class Test{[m
[32m+[m[32m        static  ObjectHolder staticObj = new ObjectHolder();[m
[32m+[m[32m        ObjectHolder instanceObj = new ObjectHolder();[m
[32m+[m
[32m+[m[32m        void foo(){[m
[32m+[m[32m            ObjectHolder localObj = new ObjectHolder();[m
[32m+[m[32m            System.out.println("done");[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    private static class ObjectHolder{}[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        Test test = new Test();[m
[32m+[m[32m        test.foo();[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/jvm/Q4.java b/src/main/java/jvm/Q4.java[m
[1mnew file mode 100644[m
[1mindex 0000000..4a63a25[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/jvm/Q4.java[m
[36m@@ -0,0 +1,65 @@[m
[32m+[m[32mpackage jvm;[m
[32m+[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class Q4 {[m
[32m+[m
[32m+[m
[32m+[m[32m        public static String fractionToDecimal(int numerator, int denominator) {[m
[32m+[m[32m            long numeratorLong = (long) numerator;[m
[32m+[m[32m            long denominatorLong = (long) denominator;[m
[32m+[m[32m            if (numeratorLong % denominatorLong == 0) {[m
[32m+[m[32m                return String.valueOf(numeratorLong / denominatorLong);[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            StringBuffer sb = new StringBuffer();[m
[32m+[m[32m            if (numeratorLong < 0 ^ denominatorLong < 0) {[m
[32m+[m[32m                sb.append('-');[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // 整数部分[m
[32m+[m[32m            numeratorLong = Math.abs(numeratorLong);[m
[32m+[m[32m            denominatorLong = Math.abs(denominatorLong);[m
[32m+[m[32m            long integerPart = numeratorLong / denominatorLong;[m
[32m+[m[32m            sb.append(integerPart);[m
[32m+[m[32m            sb.append('.');[m
[32m+[m
[32m+[m[32m            // 小数部分[m
[32m+[m[32m            StringBuffer fractionPart = new StringBuffer();[m
[32m+[m[32m            Map<Long, Integer> remainderIndexMap = new HashMap<Long, Integer>();[m
[32m+[m[32m            long remainder = numeratorLong % denominatorLong;[m
[32m+[m[32m            int index = 0;[m
[32m+[m[32m            while (remainder != 0 && !remainderIndexMap.containsKey(remainder)) {[m
[32m+[m[32m                remainderIndexMap.put(remainder, index);[m
[32m+[m[32m                remainder *= 10;[m
[32m+[m[32m                fractionPart.append(remainder / denominatorLong);[m
[32m+[m[32m                remainder %= denominatorLong;[m
[32m+[m[32m                index++;[m
[32m+[m[32m            }[m
[32m+[m[32m            if (remainder != 0) { // 有循环节[m
[32m+[m[32m                int insertIndex = remainderIndexMap.get(remainder);[m
[32m+[m[32m                fractionPart.insert(insertIndex, '(');[m
[32m+[m[32m                fractionPart.append(')');[m
[32m+[m[32m            }[m
[32m+[m[32m            sb.append(fractionPart.toString());[m
[32m+[m
[32m+[m[32m            return sb.toString();[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m
[32m+[m
[32m+[m[32m        String res = fractionToDecimal(4,333);[m
[32m+[m
[32m+[m[32m        System.out.println(res);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/jvm/QuickSort.java b/src/main/java/jvm/QuickSort.java[m
[1mnew file mode 100644[m
[1mindex 0000000..c260772[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/jvm/QuickSort.java[m
[36m@@ -0,0 +1,76 @@[m
[32m+[m[32mpackage jvm;[m
[32m+[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class QuickSort {[m
[32m+[m[32m    static boolean res = false;[m
[32m+[m[32m    public static int minimumNumbers(int num, int k) {[m
[32m+[m[32m        if(num == 0)[m
[32m+[m[32m            return 0;[m
[32m+[m
[32m+[m
[32m+[m[32m        List<Integer>list = new ArrayList<>();[m
[32m+[m[32m        int time = 1;[m
[32m+[m[32m        if(k == 0){[m
[32m+[m[32m            if(num % 10 != 0)[m
[32m+[m[32m                return -1;[m
[32m+[m[32m            else{[m
[32m+[m[32m                return 1;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        int cur = k;[m
[32m+[m[32m        boolean isOk = true;[m
[32m+[m[32m        for(int i = 1; i <= 10; i++){[m
[32m+[m[32m            time = i;[m
[32m+[m[32m            cur = k * i;[m
[32m+[m[32m            if(num % 10 == cur % 10){[m
[32m+[m[32m                break;[m
[32m+[m[32m            }[m
[32m+[m[32m            if(time == 10)[m
[32m+[m[32m                isOk =false;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        if(!isOk)[m
[32m+[m[32m            return -1;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m        while(k <= num){[m
[32m+[m[32m            list.add(k);[m
[32m+[m[32m            k += 10;[m
[32m+[m[32m        }[m
[32m+[m[32m        if(list.contains(num))[m
[32m+[m[32m            return 1;[m
[32m+[m[32m        Collections.reverse(list);[m
[32m+[m[32m        dfs(list, num, time, 0, 0);[m
[32m+[m[32m        if(res)[m
[32m+[m[32m            return time;[m
[32m+[m[32m        return -1;[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void dfs(List<Integer> list, int num, int time, int sum, int curTime){[m
[32m+[m[32m        if(sum > num)[m
[32m+[m[32m            return;[m
[32m+[m[32m        if(curTime == time){[m
[32m+[m[32m            if(sum == num){[m
[32m+[m[32m                res = true;[m
[32m+[m[32m                return;[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        for(int i = 0; i < list.size() && !res; i++){[m
[32m+[m[32m            dfs(list,num,time, sum + list.get(i), curTime + 1);[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m        public static void main(String[] args) {[m
[32m+[m[32m            int res = minimumNumbers(197, 2);[m
[32m+[m[32m            System.out.println(res);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/jvm/Solution.java b/src/main/java/jvm/Solution.java[m
[1mnew file mode 100644[m
[1mindex 0000000..ce5926b[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/jvm/Solution.java[m
[36m@@ -0,0 +1,43 @@[m
[32m+[m[32mpackage jvm;[m
[32m+[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m[32mimport java.util.HashMap;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32mpublic class Solution {[m
[32m+[m[32m    public long[] getDistances(int[] arr) {[m
[32m+[m[32m        ArrayList<Integer> list = new ArrayList<>();[m
[32m+[m[32m        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();[m
[32m+[m
[32m+[m[32m        for (int i = 0; i < arr.length; i++) {[m
[32m+[m[32m            int temp = arr[i];[m
[32m+[m[32m            list = map.getOrDefault(temp, new ArrayList<Integer>());[m
[32m+[m[32m            list.add(i);[m
[32m+[m[32m            map.put(temp, list);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        long[]result = new long[arr.length];[m
[32m+[m[32m        for(int i = 0; i < arr.length; i++){[m
[32m+[m[32m            long ans = 0;[m
[32m+[m[32m            list = map.get(arr[i]);[m
[32m+[m[32m            for(int j = 0; j < list.size(); j++){[m
[32m+[m[32m                int end = list.size() - 1;[m
[32m+[m[32m                if( j == 0) {[m
[32m+[m[32m                    for (int n = 1; n < list.size(); n++) {[m
[32m+[m[32m                        ans += Math.abs(i - list.get(n));[m
[32m+[m[32m                    }[m
[32m+[m[32m                    result[i] = ans;[m
[32m+[m[32m                }[m
[32m+[m[32m                else{[m
[32m+[m[32m                    result[list.get(j)] = result[list.get(j - 1)] - (2*j - end - 1) * (list.get(j) - list.get(j - 1));[m
[32m+[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m        return result;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/jvm/heap.java b/src/main/java/jvm/heap.java[m
[1mnew file mode 100644[m
[1mindex 0000000..23315c3[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/jvm/heap.java[m
[36m@@ -0,0 +1,18 @@[m
[32m+[m[32mpackage jvm;[m
[32m+[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m[32mimport java.util.List;[m
[32m+[m
[32m+[m[32mpublic class heap {[m
[32m+[m[32m    static class OOMObject{[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        List<OOMObject> list = new ArrayList<>();[m
[32m+[m[32m        while(true){[m
[32m+[m[32m            list.add(new heap.OOMObject());[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/jvm/stack.java b/src/main/java/jvm/stack.java[m
[1mnew file mode 100644[m
[1mindex 0000000..5945cc0[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/jvm/stack.java[m
[36m@@ -0,0 +1,22 @@[m
[32m+[m[32mpackage jvm;[m
[32m+[m
[32m+[m[32mpublic class stack {[m
[32m+[m[32m    private int stackLength = 1;[m
[32m+[m[32m    public void stackLeak(){[m
[32m+[m[32m        stackLength++;[m
[32m+[m[32m        stackLeak();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) throws Exception {[m
[32m+[m[32m        stack stack = new stack();[m
[32m+[m
[32m+[m[32m        try{[m
[32m+[m[32m            stack.stackLeak();[m
[32m+[m[32m        }catch (Throwable e){[m
[32m+[m[32m            System.out.println("StackLength" + stack.stackLength);[m
[32m+[m[32m            throw e;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/jvm/word.java b/src/main/java/jvm/word.java[m
[1mnew file mode 100644[m
[1mindex 0000000..0dd9dd0[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/jvm/word.java[m
[36m@@ -0,0 +1,86 @@[m
[32m+[m[32mpackage jvm;[m
[32m+[m
[32m+[m[32mimport java.util.*;[m
[32m+[m
[32m+[m[32mpublic class word {[m
[32m+[m
[32m+[m[32m    static class Node{[m
[32m+[m[32m        boolean isEnd;[m
[32m+[m[32m        Node[]array;[m
[32m+[m
[32m+[m[32m        public Node(){[m
[32m+[m[32m            array = new Node[26];[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static Node node = new Node();[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void addWord(String word) {[m
[32m+[m[32m        add(word);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static boolean search(String word) {[m
[32m+[m[32m        return search(word, 0, node);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void add(String word){[m
[32m+[m[32m        Node temp = node;[m
[32m+[m
[32m+[m[32m        for(int i = 0; i < word.length(); i++){[m
[32m+[m[32m            char cha = word.charAt(i);[m
[32m+[m[32m            int index = cha - 'a';[m
[32m+[m[32m            if(temp.array[index] == null){[m
[32m+[m[32m                Node temp1 = new Node();[m
[32m+[m[32m                temp.array[index] = temp1;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            temp = temp.array[index];[m
[32m+[m[32m        }[m
[32m+[m[32m        temp.isEnd = true;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static boolean search(String word, int index, Node node){[m
[32m+[m[32m        if(node == null)[m
[32m+[m[32m            return false;[m
[32m+[m[32m        if(index == word.length()){[m
[32m+[m[32m            return node.isEnd;[m
[32m+[m[32m        }[m
[32m+[m[32m        char cur = word.charAt(index);[m
[32m+[m[32m        int index1 = cur - 'a';[m
[32m+[m
[32m+[m[32m        if(cur == '.'){[m
[32m+[m[32m            boolean res = false;[m
[32m+[m[32m            for(int i = 0; i < 26; i++){[m
[32m+[m[32m                if(node.array[i] != null){[m
[32m+[m[32m                    res |= search(word, index + 1, node.array[i]);[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m            return res;[m
[32m+[m[32m        }[m
[32m+[m[32m        else{[m
[32m+[m[32m            if(node.array[index1] == null)[m
[32m+[m[32m                return false;[m
[32m+[m[32m            else[m
[32m+[m[32m                return search(word, index + 1, node.array[index1]);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        addWord("bad");[m
[32m+[m[32m        boolean res = search(".ad");[m
[32m+[m[32m        System.out.println(res);[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[1mdiff --git a/src/main/java/linklist.java b/src/main/java/linklist.java[m
[1mnew file mode 100644[m
[1mindex 0000000..e90273f[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/linklist.java[m
[36m@@ -0,0 +1,62 @@[m
[32m+[m[32mimport java.util.LinkedList;[m
[32m+[m[32mimport java.util.Stack;[m
[32m+[m
[32m+[m[32mpublic class linklist {[m
[32m+[m[32m    Stack<Integer> stack1;[m
[32m+[m[32m    Stack<Integer> stack2;[m
[32m+[m[32m    /** Initialize your data structure here. */[m
[32m+[m[32m    public linklist() {[m
[32m+[m[32m        stack1=new Stack<>();[m
[32m+[m[32m        stack2=new Stack<>();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /** Push element x to the back of queue. */[m
[32m+[m[32m    public void push(int x) {[m
[32m+[m[32m        stack1.push(x);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /** Removes the element from in front of queue and returns that element. */[m
[32m+[m[32m    public int pop() {[m
[32m+[m[32m        if(stack2.isEmpty()){[m
[32m+[m[32m            while(!stack1.isEmpty()){[m
[32m+[m[32m                stack2.push(stack1.pop());[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        return stack2.pop();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /** Get the front element. */[m
[32m+[m[32m    public int peek() {[m
[32m+[m[32m        if(stack2.isEmpty()){[m
[32m+[m[32m            while(!stack1.isEmpty()){[m
[32m+[m[32m                stack2.push(stack1.pop());[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        return stack2.peek();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /** Returns whether the queue is empty. */[m
[32m+[m[32m    public boolean empty() {[m
[32m+[m[32m        return stack2.isEmpty()&&stack1.isEmpty();[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
[32m+[m[32m    public static void main(String[] args) {[m
[32m+[m[32m        linklist test = new linklist();[m
[32m+[m[32m        test.push(1);[m
[32m+[m[32m        test.push(2);[m
[32m+[m[32m        test.push(3);[m
[32m+[m[32m        test.push(4);[m
[32m+[m[32m        test.pop();[m
[32m+[m
[32m+[m[32m        test.push(5);[m
[32m+[m[32m        test.pop();[m
[32m+[m[32m        test.pop();[m
[32m+[m[32m        test.pop();[m
[32m+[m[32m        test.pop();[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/src/main/java/mergeSort.java b/src/main/java/mergeSort.java[m
[1mnew file mode 100644[m
[1mindex 0000000..8e4563a[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/mergeSort.java[m
[36m@@ -0,0 +1,57 @@[m
[32m+[m[32mimport java.util.ArrayList;[m
[32m+[m
[32m+[m[32mclass mergeSort {[m
[32m+[m[32m    public int reversePairs(int[] nums) {[m
[32m+[m
[32m+[m[32m        int[] result = new int[nums.length];[m
[32m+[m[32m        ArrayList<Integer> list = new ArrayList<Integer>();[m
[32m+[m[32m        mergeSort(nums, 0, nums.length -1, result, list);[m
[32m+[m[32m        int count = 0;[m
[32m+[m[32m        for (int i = 0; i < list.size(); i++) {[m
[32m+[m[32m            count += list.get(i);[m
[32m+[m[32m        }[m
[32m+[m[32m        return count;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public void mergeSort(int[]arr, int start, int end, int[]result, ArrayList<Integer> list){[m
[32m+[m[32m        if(start == end) return;[m
[32m+[m[32m        int middle = (start + end) / 2;[m
[32m+[m[32m        mergeSort(arr, start, middle, result, list);[m
[32m+[m[32m        mergeSort(arr, middle + 1, end, result, list);[m
[32m+[m[32m        list.add(merge(arr, start, end, result));[m
[32m+[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public int merge(int []arr , int start , int end, int[] result){[m
[32m+[m[32m        int middle = (start + end) / 2;[m
[32m+[m[32m        int count = 0;[m
[32m+[m[32m        int end1 = middle;[m
[32m+[m[32m        int index1 = start;[m
[32m+[m[32m        int index2 = middle + 1;[m
[32m+[m[32m        int resultindex = start;[m
[32m+[m[32m        while(index1 <= middle && index2 <= end){[m
[32m+[m[32m            if(arr[index1] <= arr[index2])[m
[32m+[m[32m                result[resultindex++] = arr[index1++];[m
[32m+[m[32m            else{[m
[32m+[m[32m                result[resultindex++] = arr[index2++];[m
[32m+[m[32m                if(index1 == middle)[m
[32m+[m[32m                    count++;[m
[32m+[m[32m                else[m
[32m+[m[32m                    count+= (middle - index1 + 1);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m        while(index1 <= middle){[m
[32m+[m[32m            result[resultindex++] = arr[index1++];[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m        while(index2 <= end){[m
[32m+[m[32m            result[resultindex++] = arr[index2++];[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        while(start <= end)[m
[32m+[m[32m            arr[start] = result[start++];[m
[32m+[m[32m        return count;[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/stackTest.java b/src/main/java/stackTest.java[m
[1mnew file mode 100644[m
[1mindex 0000000..2b549df[m
[1m--- /dev/null[m
[1m+++ b/src/main/java/stackTest.java[m
[36m@@ -0,0 +1,36 @@[m
[32m+[m[32mimport java.util.EmptyStackException;[m
[32m+[m[32mimport java.util.Stack;[m
[32m+[m
[32m+[m[32mpublic class stackTest {[m
[32m+[m[32m    static void showpush(Stack<Integer>st, int a){[m
[32m+[m[32m        st.push(a);[m
[32m+[m[32m        System.out.println("push " + a);[m
[32m+[m[32m        System.out.println("Stack " + st);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    static void showpop(Stack<Integer>st){[m
[32m+[m[32m        System.out.println("pop ->");[m
[32m+[m[32m        int a = (int)st.pop();[m
[32m+[m[32m        System.out.println(a);[m
[32m+[m[32m        System.out.println("stack " + st);[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    public  void main(String[] args) {[m
[32m+[m[32m        Stack<Integer>st = new Stack<Integer>();[m
[32m+[m[32m        System.out.println("current Stack : " + st);[m
[32m+[m[32m        showpush(st, 1);[m
[32m+[m[32m        showpush(st, 2);[m
[32m+[m
[32m+[m[32m        showpop(st);[m
[32m+[m[32m        showpop(st);[m
[32m+[m[32m        showpop(st);[m
[32m+[m
[32m+[m[32m//        try{[m
[32m+[m[32m//            showpop(st);[m
[32m+[m[32m//        }catch (EmptyStackException e){[m
[32m+[m[32m//            System.out.println("Empty satck");[m
[32m+[m[32m//        }[m
[32m+[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
[1mdiff --git a/target/classes/Bubblesort.class b/target/classes/Bubblesort.class[m
[1mnew file mode 100644[m
[1mindex 0000000..0e961ef[m
Binary files /dev/null and b/target/classes/Bubblesort.class differ
[1mdiff --git a/target/classes/Dough/Chapter1/TrainTicket$TicketTask.class b/target/classes/Dough/Chapter1/TrainTicket$TicketTask.class[m
[1mnew file mode 100644[m
[1mindex 0000000..0a75b8b[m
Binary files /dev/null and b/target/classes/Dough/Chapter1/TrainTicket$TicketTask.class differ
[1mdiff --git a/target/classes/Dough/Chapter1/TrainTicket.class b/target/classes/Dough/Chapter1/TrainTicket.class[m
[1mnew file mode 100644[m
[1mindex 0000000..87d723a[m
Binary files /dev/null and b/target/classes/Dough/Chapter1/TrainTicket.class differ
[1mdiff --git a/target/classes/Dough/Chapter1/myTest1$1.class b/target/classes/Dough/Chapter1/myTest1$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..1641904[m
Binary files /dev/null and b/target/classes/Dough/Chapter1/myTest1$1.class differ
[1mdiff --git a/target/classes/Dough/Chapter1/myTest1$2.class b/target/classes/Dough/Chapter1/myTest1$2.class[m
[1mnew file mode 100644[m
[1mindex 0000000..453de1e[m
Binary files /dev/null and b/target/classes/Dough/Chapter1/myTest1$2.class differ
[1mdiff --git a/target/classes/Dough/Chapter1/myTest1.class b/target/classes/Dough/Chapter1/myTest1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..6a98fce[m
Binary files /dev/null and b/target/classes/Dough/Chapter1/myTest1.class differ
[1mdiff --git a/target/classes/Dough/Chapter1/myTest2$1.class b/target/classes/Dough/Chapter1/myTest2$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..5883d65[m
Binary files /dev/null and b/target/classes/Dough/Chapter1/myTest2$1.class differ
[1mdiff --git a/target/classes/Dough/Chapter1/myTest2$2.class b/target/classes/Dough/Chapter1/myTest2$2.class[m
[1mnew file mode 100644[m
[1mindex 0000000..e92ad4b[m
Binary files /dev/null and b/target/classes/Dough/Chapter1/myTest2$2.class differ
[1mdiff --git a/target/classes/Dough/Chapter1/myTest2.class b/target/classes/Dough/Chapter1/myTest2.class[m
[1mnew file mode 100644[m
[1mindex 0000000..ca63770[m
Binary files /dev/null and b/target/classes/Dough/Chapter1/myTest2.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/BuildMatrix$MatrixSolver$1.class b/target/classes/Dough/Chapter3/BuildMatrix$MatrixSolver$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..506dc67[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/BuildMatrix$MatrixSolver$1.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/BuildMatrix$MatrixSolver.class b/target/classes/Dough/Chapter3/BuildMatrix$MatrixSolver.class[m
[1mnew file mode 100644[m
[1mindex 0000000..1470487[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/BuildMatrix$MatrixSolver.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/BuildMatrix$Worker.class b/target/classes/Dough/Chapter3/BuildMatrix$Worker.class[m
[1mnew file mode 100644[m
[1mindex 0000000..8d45eb2[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/BuildMatrix$Worker.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/BuildMatrix.class b/target/classes/Dough/Chapter3/BuildMatrix.class[m
[1mnew file mode 100644[m
[1mindex 0000000..bc7ade2[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/BuildMatrix.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/CarBuild$waitingTask.class b/target/classes/Dough/Chapter3/CarBuild$waitingTask.class[m
[1mnew file mode 100644[m
[1mindex 0000000..cf9d038[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/CarBuild$waitingTask.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/CarBuild$workingTask.class b/target/classes/Dough/Chapter3/CarBuild$workingTask.class[m
[1mnew file mode 100644[m
[1mindex 0000000..f01f1f8[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/CarBuild$workingTask.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/CarBuild.class b/target/classes/Dough/Chapter3/CarBuild.class[m
[1mnew file mode 100644[m
[1mindex 0000000..5f08c03[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/CarBuild.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/ChefAndWaitor$Chef.class b/target/classes/Dough/Chapter3/ChefAndWaitor$Chef.class[m
[1mnew file mode 100644[m
[1mindex 0000000..60a43e8[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/ChefAndWaitor$Chef.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/ChefAndWaitor$Order.class b/target/classes/Dough/Chapter3/ChefAndWaitor$Order.class[m
[1mnew file mode 100644[m
[1mindex 0000000..359d752[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/ChefAndWaitor$Order.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/ChefAndWaitor$Resturant.class b/target/classes/Dough/Chapter3/ChefAndWaitor$Resturant.class[m
[1mnew file mode 100644[m
[1mindex 0000000..68b5a7d[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/ChefAndWaitor$Resturant.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/ChefAndWaitor$Waitor.class b/target/classes/Dough/Chapter3/ChefAndWaitor$Waitor.class[m
[1mnew file mode 100644[m
[1mindex 0000000..d40e182[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/ChefAndWaitor$Waitor.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/ChefAndWaitor.class b/target/classes/Dough/Chapter3/ChefAndWaitor.class[m
[1mnew file mode 100644[m
[1mindex 0000000..9b8a38b[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/ChefAndWaitor.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/IsInterrupated$1.class b/target/classes/Dough/Chapter3/IsInterrupated$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..44e2372[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/IsInterrupated$1.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/IsInterrupated.class b/target/classes/Dough/Chapter3/IsInterrupated.class[m
[1mnew file mode 100644[m
[1mindex 0000000..5fb79ad[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/IsInterrupated.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/Print$State.class b/target/classes/Dough/Chapter3/Print$State.class[m
[1mnew file mode 100644[m
[1mindex 0000000..b27e0f9[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/Print$State.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/Print$printA.class b/target/classes/Dough/Chapter3/Print$printA.class[m
[1mnew file mode 100644[m
[1mindex 0000000..b26731d[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/Print$printA.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/Print$printB.class b/target/classes/Dough/Chapter3/Print$printB.class[m
[1mnew file mode 100644[m
[1mindex 0000000..5e43f95[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/Print$printB.class differ
[1mdiff --git a/target/classes/Dough/Chapter3/Print.class b/target/classes/Dough/Chapter3/Print.class[m
[1mnew file mode 100644[m
[1mindex 0000000..57016bd[m
Binary files /dev/null and b/target/classes/Dough/Chapter3/Print.class differ
[1mdiff --git a/target/classes/Dough/Chapter4/HttpRequest$1.class b/target/classes/Dough/Chapter4/HttpRequest$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..824b981[m
Binary files /dev/null and b/target/classes/Dough/Chapter4/HttpRequest$1.class differ
[1mdiff --git a/target/classes/Dough/Chapter4/HttpRequest.class b/target/classes/Dough/Chapter4/HttpRequest.class[m
[1mnew file mode 100644[m
[1mindex 0000000..c3772fe[m
Binary files /dev/null and b/target/classes/Dough/Chapter4/HttpRequest.class differ
[1mdiff --git a/target/classes/Dough/Chapter4/ThreadPool$1.class b/target/classes/Dough/Chapter4/ThreadPool$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..1ff4f88[m
Binary files /dev/null and b/target/classes/Dough/Chapter4/ThreadPool$1.class differ
[1mdiff --git a/target/classes/Dough/Chapter4/ThreadPool.class b/target/classes/Dough/Chapter4/ThreadPool.class[m
[1mnew file mode 100644[m
[1mindex 0000000..4b6f225[m
Binary files /dev/null and b/target/classes/Dough/Chapter4/ThreadPool.class differ
[1mdiff --git a/target/classes/Dough/Chapter4/WebServer$1.class b/target/classes/Dough/Chapter4/WebServer$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..5aef2e4[m
Binary files /dev/null and b/target/classes/Dough/Chapter4/WebServer$1.class differ
[1mdiff --git a/target/classes/Dough/Chapter4/WebServer$2.class b/target/classes/Dough/Chapter4/WebServer$2.class[m
[1mnew file mode 100644[m
[1mindex 0000000..82548e1[m
Binary files /dev/null and b/target/classes/Dough/Chapter4/WebServer$2.class differ
[1mdiff --git a/target/classes/Dough/Chapter4/WebServer.class b/target/classes/Dough/Chapter4/WebServer.class[m
[1mnew file mode 100644[m
[1mindex 0000000..32d8702[m
Binary files /dev/null and b/target/classes/Dough/Chapter4/WebServer.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/FamilyMoney$Family.class b/target/classes/Dough/Chatpter2/FamilyMoney$Family.class[m
[1mnew file mode 100644[m
[1mindex 0000000..4d0baef[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/FamilyMoney$Family.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/FamilyMoney$Father.class b/target/classes/Dough/Chatpter2/FamilyMoney$Father.class[m
[1mnew file mode 100644[m
[1mindex 0000000..c1a4359[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/FamilyMoney$Father.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/FamilyMoney$FatherTask.class b/target/classes/Dough/Chatpter2/FamilyMoney$FatherTask.class[m
[1mnew file mode 100644[m
[1mindex 0000000..00e87a3[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/FamilyMoney$FatherTask.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/FamilyMoney$Mother.class b/target/classes/Dough/Chatpter2/FamilyMoney$Mother.class[m
[1mnew file mode 100644[m
[1mindex 0000000..c2b88f2[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/FamilyMoney$Mother.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/FamilyMoney$MotherTask.class b/target/classes/Dough/Chatpter2/FamilyMoney$MotherTask.class[m
[1mnew file mode 100644[m
[1mindex 0000000..505c90d[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/FamilyMoney$MotherTask.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/FamilyMoney$Son.class b/target/classes/Dough/Chatpter2/FamilyMoney$Son.class[m
[1mnew file mode 100644[m
[1mindex 0000000..834413d[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/FamilyMoney$Son.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/FamilyMoney$SonTask.class b/target/classes/Dough/Chatpter2/FamilyMoney$SonTask.class[m
[1mnew file mode 100644[m
[1mindex 0000000..ce11200[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/FamilyMoney$SonTask.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/FamilyMoney.class b/target/classes/Dough/Chatpter2/FamilyMoney.class[m
[1mnew file mode 100644[m
[1mindex 0000000..8eb0daa[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/FamilyMoney.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/SaleingTickets$Curtain.class b/target/classes/Dough/Chatpter2/SaleingTickets$Curtain.class[m
[1mnew file mode 100644[m
[1mindex 0000000..2f90e6b[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/SaleingTickets$Curtain.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/SaleingTickets$Ticket.class b/target/classes/Dough/Chatpter2/SaleingTickets$Ticket.class[m
[1mnew file mode 100644[m
[1mindex 0000000..f1039f0[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/SaleingTickets$Ticket.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/SaleingTickets$TicketTask.class b/target/classes/Dough/Chatpter2/SaleingTickets$TicketTask.class[m
[1mnew file mode 100644[m
[1mindex 0000000..7d279ea[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/SaleingTickets$TicketTask.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/SaleingTickets.class b/target/classes/Dough/Chatpter2/SaleingTickets.class[m
[1mnew file mode 100644[m
[1mindex 0000000..6cf0fa1[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/SaleingTickets.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/SingleTon$1$1.class b/target/classes/Dough/Chatpter2/SingleTon$1$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..6868b36[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/SingleTon$1$1.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/SingleTon$1.class b/target/classes/Dough/Chatpter2/SingleTon$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..cfed684[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/SingleTon$1.class differ
[1mdiff --git a/target/classes/Dough/Chatpter2/SingleTon.class b/target/classes/Dough/Chatpter2/SingleTon.class[m
[1mnew file mode 100644[m
[1mindex 0000000..0c066bd[m
Binary files /dev/null and b/target/classes/Dough/Chatpter2/SingleTon.class differ
[1mdiff --git a/target/classes/Enum.class b/target/classes/Enum.class[m
[1mnew file mode 100644[m
[1mindex 0000000..05488b7[m
Binary files /dev/null and b/target/classes/Enum.class differ
[1mdiff --git a/target/classes/RunoobTest$1.class b/target/classes/RunoobTest$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..26c742b[m
Binary files /dev/null and b/target/classes/RunoobTest$1.class differ
[1mdiff --git a/target/classes/RunoobTest$2.class b/target/classes/RunoobTest$2.class[m
[1mnew file mode 100644[m
[1mindex 0000000..0e31a88[m
Binary files /dev/null and b/target/classes/RunoobTest$2.class differ
[1mdiff --git a/target/classes/RunoobTest.class b/target/classes/RunoobTest.class[m
[1mnew file mode 100644[m
[1mindex 0000000..66a46e1[m
Binary files /dev/null and b/target/classes/RunoobTest.class differ
[1mdiff --git a/target/classes/SelectionSort.class b/target/classes/SelectionSort.class[m
[1mnew file mode 100644[m
[1mindex 0000000..a53380b[m
Binary files /dev/null and b/target/classes/SelectionSort.class differ
[1mdiff --git a/target/classes/Solution.class b/target/classes/Solution.class[m
[1mnew file mode 100644[m
[1mindex 0000000..6f5c72c[m
Binary files /dev/null and b/target/classes/Solution.class differ
[1mdiff --git a/target/classes/Test$findWords.class b/target/classes/Test$findWords.class[m
[1mnew file mode 100644[m
[1mindex 0000000..6372084[m
Binary files /dev/null and b/target/classes/Test$findWords.class differ
[1mdiff --git a/target/classes/Test.class b/target/classes/Test.class[m
[1mnew file mode 100644[m
[1mindex 0000000..d74358a[m
Binary files /dev/null and b/target/classes/Test.class differ
[1mdiff --git a/target/classes/arrarylist.class b/target/classes/arrarylist.class[m
[1mnew file mode 100644[m
[1mindex 0000000..4a3525d[m
Binary files /dev/null and b/target/classes/arrarylist.class differ
[1mdiff --git a/target/classes/com/Meituan/Solution$Trie.class b/target/classes/com/Meituan/Solution$Trie.class[m
[1mnew file mode 100644[m
[1mindex 0000000..48908da[m
Binary files /dev/null and b/target/classes/com/Meituan/Solution$Trie.class differ
[1mdiff --git a/target/classes/com/Meituan/Solution.class b/target/classes/com/Meituan/Solution.class[m
[1mnew file mode 100644[m
[1mindex 0000000..be2d7a9[m
Binary files /dev/null and b/target/classes/com/Meituan/Solution.class differ
[1mdiff --git a/target/classes/com/Meituan/Solution4$Node.class b/target/classes/com/Meituan/Solution4$Node.class[m
[1mnew file mode 100644[m
[1mindex 0000000..737b793[m
Binary files /dev/null and b/target/classes/com/Meituan/Solution4$Node.class differ
[1mdiff --git a/target/classes/com/Meituan/Solution4.class b/target/classes/com/Meituan/Solution4.class[m
[1mnew file mode 100644[m
[1mindex 0000000..41b81fc[m
Binary files /dev/null and b/target/classes/com/Meituan/Solution4.class differ
[1mdiff --git a/target/classes/com/Meituan/WangYi$1.class b/target/classes/com/Meituan/WangYi$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..72ac8c6[m
Binary files /dev/null and b/target/classes/com/Meituan/WangYi$1.class differ
[1mdiff --git a/target/classes/com/Meituan/WangYi.class b/target/classes/com/Meituan/WangYi.class[m
[1mnew file mode 100644[m
[1mindex 0000000..427df40[m
Binary files /dev/null and b/target/classes/com/Meituan/WangYi.class differ
[1mdiff --git a/target/classes/com/Meituan/solution1.class b/target/classes/com/Meituan/solution1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..87fd14c[m
Binary files /dev/null and b/target/classes/com/Meituan/solution1.class differ
[1mdiff --git a/target/classes/com/Meituan/solution2.class b/target/classes/com/Meituan/solution2.class[m
[1mnew file mode 100644[m
[1mindex 0000000..fedeff3[m
Binary files /dev/null and b/target/classes/com/Meituan/solution2.class differ
[1mdiff --git a/target/classes/com/Meituan/solution3.class b/target/classes/com/Meituan/solution3.class[m
[1mnew file mode 100644[m
[1mindex 0000000..2b35095[m
Binary files /dev/null and b/target/classes/com/Meituan/solution3.class differ
[1mdiff --git a/target/classes/com/Meituan/solution5.class b/target/classes/com/Meituan/solution5.class[m
[1mnew file mode 100644[m
[1mindex 0000000..e4b52eb[m
Binary files /dev/null and b/target/classes/com/Meituan/solution5.class differ
[1mdiff --git a/target/classes/com/Meituan/solution6.class b/target/classes/com/Meituan/solution6.class[m
[1mnew file mode 100644[m
[1mindex 0000000..0722c80[m
Binary files /dev/null and b/target/classes/com/Meituan/solution6.class differ
[1mdiff --git a/target/classes/com/Meituan/solution7$1.class b/target/classes/com/Meituan/solution7$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..6dda0f6[m
Binary files /dev/null and b/target/classes/com/Meituan/solution7$1.class differ
[1mdiff --git a/target/classes/com/Meituan/solution7.class b/target/classes/com/Meituan/solution7.class[m
[1mnew file mode 100644[m
[1mindex 0000000..ae42a67[m
Binary files /dev/null and b/target/classes/com/Meituan/solution7.class differ
[1mdiff --git a/target/classes/com/Rand.class b/target/classes/com/Rand.class[m
[1mnew file mode 100644[m
[1mindex 0000000..37ce119[m
Binary files /dev/null and b/target/classes/com/Rand.class differ
[1mdiff --git a/target/classes/com/Solution_1.class b/target/classes/com/Solution_1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..893407f[m
Binary files /dev/null and b/target/classes/com/Solution_1.class differ
[1mdiff --git a/target/classes/com/Student.class b/target/classes/com/Student.class[m
[1mnew file mode 100644[m
[1mindex 0000000..c28d9fa[m
Binary files /dev/null and b/target/classes/com/Student.class differ
[1mdiff --git a/target/classes/com/multi/Father.class b/target/classes/com/multi/Father.class[m
[1mnew file mode 100644[m
[1mindex 0000000..489cdf3[m
Binary files /dev/null and b/target/classes/com/multi/Father.class differ
[1mdiff --git a/target/classes/com/multi/Son.class b/target/classes/com/multi/Son.class[m
[1mnew file mode 100644[m
[1mindex 0000000..a31e70c[m
Binary files /dev/null and b/target/classes/com/multi/Son.class differ
[1mdiff --git a/target/classes/com/multi/hello.class b/target/classes/com/multi/hello.class[m
[1mnew file mode 100644[m
[1mindex 0000000..a063bf1[m
Binary files /dev/null and b/target/classes/com/multi/hello.class differ
[1mdiff --git a/target/classes/com/sort/BubbleSort.class b/target/classes/com/sort/BubbleSort.class[m
[1mnew file mode 100644[m
[1mindex 0000000..b9bd353[m
Binary files /dev/null and b/target/classes/com/sort/BubbleSort.class differ
[1mdiff --git a/target/classes/com/sort/ChooseSort.class b/target/classes/com/sort/ChooseSort.class[m
[1mnew file mode 100644[m
[1mindex 0000000..6cff776[m
Binary files /dev/null and b/target/classes/com/sort/ChooseSort.class differ
[1mdiff --git a/target/classes/com/sort/Main.class b/target/classes/com/sort/Main.class[m
[1mnew file mode 100644[m
[1mindex 0000000..b3af334[m
Binary files /dev/null and b/target/classes/com/sort/Main.class differ
[1mdiff --git a/target/classes/com/sort/MainSolution.class b/target/classes/com/sort/MainSolution.class[m
[1mnew file mode 100644[m
[1mindex 0000000..df61874[m
Binary files /dev/null and b/target/classes/com/sort/MainSolution.class differ
[1mdiff --git a/target/classes/com/sort/MergeSort.class b/target/classes/com/sort/MergeSort.class[m
[1mnew file mode 100644[m
[1mindex 0000000..ec94acd[m
Binary files /dev/null and b/target/classes/com/sort/MergeSort.class differ
[1mdiff --git a/target/classes/com/sort/QuickSort.class b/target/classes/com/sort/QuickSort.class[m
[1mnew file mode 100644[m
[1mindex 0000000..7a815f3[m
Binary files /dev/null and b/target/classes/com/sort/QuickSort.class differ
[1mdiff --git a/target/classes/com/sort/Solution.class b/target/classes/com/sort/Solution.class[m
[1mnew file mode 100644[m
[1mindex 0000000..bdb82ec[m
Binary files /dev/null and b/target/classes/com/sort/Solution.class differ
[1mdiff --git a/target/classes/com/sort/minHeap.class b/target/classes/com/sort/minHeap.class[m
[1mnew file mode 100644[m
[1mindex 0000000..a2f9207[m
Binary files /dev/null and b/target/classes/com/sort/minHeap.class differ
[1mdiff --git a/target/classes/com/synchronzed$1.class b/target/classes/com/synchronzed$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..1bff152[m
Binary files /dev/null and b/target/classes/com/synchronzed$1.class differ
[1mdiff --git a/target/classes/com/synchronzed$2.class b/target/classes/com/synchronzed$2.class[m
[1mnew file mode 100644[m
[1mindex 0000000..fb6d786[m
Binary files /dev/null and b/target/classes/com/synchronzed$2.class differ
[1mdiff --git a/target/classes/com/synchronzed.class b/target/classes/com/synchronzed.class[m
[1mnew file mode 100644[m
[1mindex 0000000..852658d[m
Binary files /dev/null and b/target/classes/com/synchronzed.class differ
[1mdiff --git a/target/classes/com/tree$TreeNode.class b/target/classes/com/tree$TreeNode.class[m
[1mnew file mode 100644[m
[1mindex 0000000..c59db15[m
Binary files /dev/null and b/target/classes/com/tree$TreeNode.class differ
[1mdiff --git a/target/classes/com/tree.class b/target/classes/com/tree.class[m
[1mnew file mode 100644[m
[1mindex 0000000..3e26a9e[m
Binary files /dev/null and b/target/classes/com/tree.class differ
[1mdiff --git a/target/classes/com/wang/BlockingQ2$1.class b/target/classes/com/wang/BlockingQ2$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..22c2ce4[m
Binary files /dev/null and b/target/classes/com/wang/BlockingQ2$1.class differ
[1mdiff --git a/target/classes/com/wang/BlockingQ2$2.class b/target/classes/com/wang/BlockingQ2$2.class[m
[1mnew file mode 100644[m
[1mindex 0000000..0cb045c[m
Binary files /dev/null and b/target/classes/com/wang/BlockingQ2$2.class differ
[1mdiff --git a/target/classes/com/wang/BlockingQ2.class b/target/classes/com/wang/BlockingQ2.class[m
[1mnew file mode 100644[m
[1mindex 0000000..c04cad2[m
Binary files /dev/null and b/target/classes/com/wang/BlockingQ2.class differ
[1mdiff --git a/target/classes/com/wang/BlockingQueue$1.class b/target/classes/com/wang/BlockingQueue$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..3c01476[m
Binary files /dev/null and b/target/classes/com/wang/BlockingQueue$1.class differ
[1mdiff --git a/target/classes/com/wang/BlockingQueue$2.class b/target/classes/com/wang/BlockingQueue$2.class[m
[1mnew file mode 100644[m
[1mindex 0000000..5c0a012[m
Binary files /dev/null and b/target/classes/com/wang/BlockingQueue$2.class differ
[1mdiff --git a/target/classes/com/wang/BlockingQueue.class b/target/classes/com/wang/BlockingQueue.class[m
[1mnew file mode 100644[m
[1mindex 0000000..1ba41d1[m
Binary files /dev/null and b/target/classes/com/wang/BlockingQueue.class differ
[1mdiff --git a/target/classes/com/wang/BuildeMyTree.class b/target/classes/com/wang/BuildeMyTree.class[m
[1mnew file mode 100644[m
[1mindex 0000000..f60ee0a[m
Binary files /dev/null and b/target/classes/com/wang/BuildeMyTree.class differ
[1mdiff --git a/target/classes/com/wang/BuilderMyTree2.class b/target/classes/com/wang/BuilderMyTree2.class[m
[1mnew file mode 100644[m
[1mindex 0000000..3ff5c42[m
Binary files /dev/null and b/target/classes/com/wang/BuilderMyTree2.class differ
[1mdiff --git a/target/classes/com/wang/Building.class b/target/classes/com/wang/Building.class[m
[1mnew file mode 100644[m
[1mindex 0000000..bd323dc[m
Binary files /dev/null and b/target/classes/com/wang/Building.class differ
[1mdiff --git a/target/classes/com/wang/HashMap$Entry.class b/target/classes/com/wang/HashMap$Entry.class[m
[1mnew file mode 100644[m
[1mindex 0000000..ca12925[m
Binary files /dev/null and b/target/classes/com/wang/HashMap$Entry.class differ
[1mdiff --git a/target/classes/com/wang/HashMap$hashMap.class b/target/classes/com/wang/HashMap$hashMap.class[m
[1mnew file mode 100644[m
[1mindex 0000000..803699f[m
Binary files /dev/null and b/target/classes/com/wang/HashMap$hashMap.class differ
[1mdiff --git a/target/classes/com/wang/HashMap.class b/target/classes/com/wang/HashMap.class[m
[1mnew file mode 100644[m
[1mindex 0000000..713a79d[m
Binary files /dev/null and b/target/classes/com/wang/HashMap.class differ
[1mdiff --git a/target/classes/com/wang/JVM.class b/target/classes/com/wang/JVM.class[m
[1mnew file mode 100644[m
[1mindex 0000000..35b0361[m
Binary files /dev/null and b/target/classes/com/wang/JVM.class differ
[1mdiff --git a/target/classes/com/wang/Random01.class b/target/classes/com/wang/Random01.class[m
[1mnew file mode 100644[m
[1mindex 0000000..a79a4e7[m
Binary files /dev/null and b/target/classes/com/wang/Random01.class differ
[1mdiff --git a/target/classes/com/wang/Solution5$1.class b/target/classes/com/wang/Solution5$1.class[m
[1mnew file mode 100644[m
[1mindex 0000000..423e8f1[m
Binary files /dev/null and b/target/classes/com/wang/Solution5$1.class differ
[1mdiff --git a/target/classes/com/wang/Solution5.class b/target/classes/com/wang/Solution5.class[m
[1mnew file mode 100644[m
[1mindex 0000000..4c75631[m
Binary files /dev/null and b/target/classes/com/wang/Solution5.class differ
[1mdiff --git a/target/classes/com/wang/Solution_3.class b/target/classes/com/wang/Solution_3.class[m
[1mnew file mode 100644[m
[1mindex 0000000..6cf6890[m
Binary files /dev/null and b/target/classes/com/wang/Solution_3.class differ
[1mdiff --git a/target/classes/com/wang/TreeNode.class b/target/classes/com/wang/TreeNode.class[m
[1mnew file mode 100644[m
[1mindex 0000000..bdd1c39[m
Binary files /dev/null and b/target/classes/com/wang/TreeNode.class differ
[1mdiff --git a/target/classes/com/wang/solution_4.class b/target/classes/com/wang/solution_4.class[m
[1mnew file mode 100644[m
[1mindex 0000000..9ab6403[m
Binary files /dev/null and b/target/classes/com/wang/solution_4.class differ
[1mdiff --git a/target/classes/headSort.class b/target/classes/headSort.class[m
[1mnew file mode 100644[m
[1mindex 0000000..3159a4c[m
Binary files /dev/null and b/target/classes/headSort.class differ
[1mdiff --git a/target/classes/jvm/GC.class b/target/classes/jvm/GC.class[m
[1mnew file mode 100644[m
[1mindex 0000000..359a6b9[m
Binary files /dev/null and b/target/classes/jvm/GC.class differ
[1mdiff --git a/target/classes/jvm/JHSDB_TestCase$ObjectHolder.class b/target/classes/jvm/JHSDB_TestCase$ObjectHolder.class[m
[1mnew file mode 100644[m
[1mindex 0000000..6ae1c29[m
Binary files /dev/null and b/target/classes/jvm/JHSDB_TestCase$ObjectHolder.class differ
[1mdiff --git a/target/classes/jvm/JHSDB_TestCase$Test.class b/target/classes/jvm/JHSDB_TestCase$Test.class[m
[1mnew file mode 100644[m
[1mindex 0000000..87d7446[m
Binary files /dev/null and b/target/classes/jvm/JHSDB_TestCase$Test.class differ
[1mdiff --git a/target/classes/jvm/JHSDB_TestCase.class b/target/classes/jvm/JHSDB_TestCase.class[m
[1mnew file mode 100644[m
[1mindex 0000000..74983ca[m
Binary files /dev/null and b/target/classes/jvm/JHSDB_TestCase.class differ
[1mdiff --git a/target/classes/jvm/Q4.class b/target/classes/jvm/Q4.class[m
[1mnew file mode 100644[m
[1mindex 0000000..034e24a[m
Binary files /dev/null and b/target/classes/jvm/Q4.class differ
[1mdiff --git a/target/classes/jvm/QuickSort.class b/target/classes/jvm/QuickSort.class[m
[1mnew file mode 100644[m
[1mindex 0000000..c9ec83a[m
Binary files /dev/null and b/target/classes/jvm/QuickSort.class differ
[1mdiff --git a/target/classes/jvm/Solution.class b/target/classes/jvm/Solution.class[m
[1mnew file mode 100644[m
[1mindex 0000000..2c766d1[m
Binary files /dev/null and b/target/classes/jvm/Solution.class differ
[1mdiff --git a/target/classes/jvm/heap$OOMObject.class b/target/classes/jvm/heap$OOMObject.class[m
[1mnew file mode 100644[m
[1mindex 0000000..256418d[m
Binary files /dev/null and b/target/classes/jvm/heap$OOMObject.class differ
[1mdiff --git a/target/classes/jvm/heap.class b/target/classes/jvm/heap.class[m
[1mnew file mode 100644[m
[1mindex 0000000..f251e95[m
Binary files /dev/null and b/target/classes/jvm/heap.class differ
[1mdiff --git a/target/classes/jvm/stack.class b/target/classes/jvm/stack.class[m
[1mnew file mode 100644[m
[1mindex 0000000..b0126dc[m
Binary files /dev/null and b/target/classes/jvm/stack.class differ
[1mdiff --git a/target/classes/jvm/word$Node.class b/target/classes/jvm/word$Node.class[m
[1mnew file mode 100644[m
[1mindex 0000000..ec4afbe[m
Binary files /dev/null and b/target/classes/jvm/word$Node.class differ
[1mdiff --git a/target/classes/jvm/word.class b/target/classes/jvm/word.class[m
[1mnew file mode 100644[m
[1mindex 0000000..0bcfe33[m
Binary files /dev/null and b/target/classes/jvm/word.class differ
[1mdiff --git a/target/classes/linklist.class b/target/classes/linklist.class[m
[1mnew file mode 100644[m
[1mindex 0000000..5664e58[m
Binary files /dev/null and b/target/classes/linklist.class differ
[1mdiff --git a/target/classes/mergeSort.class b/target/classes/mergeSort.class[m
[1mnew file mode 100644[m
[1mindex 0000000..8eef28b[m
Binary files /dev/null and b/target/classes/mergeSort.class differ
[1mdiff --git a/target/classes/stackTest.class b/target/classes/stackTest.class[m
[1mnew file mode 100644[m
[1mindex 0000000..9194b17[m
Binary files /dev/null and b/target/classes/stackTest.class differ
